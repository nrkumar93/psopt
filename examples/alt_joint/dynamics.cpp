/*
 * Copyright (c) 2021, Ramkumar Natarajan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Carnegie Mellon University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*!
 * \file   dynamics.cpp
 * \author Ramkumar Natarajan (rnataraj@cs.cmu.edu)
 * \date   6/22/21
 */

#include "dynamics.h"
#include "mcoder_math.h"

adouble ad_fmod(adouble x, adouble y)
{
  struct u {adouble f; uint64_t i;} ux, uy;
  ux.f = x;
  uy.f = y;
  int ex = ux.i>>52 & 0x7ff;
  int ey = uy.i>>52 & 0x7ff;
  int sx = ux.i>>63;
  uint64_t i;

  /* in the followings uxi should be ux.i, but then gcc wrongly adds */
  /* float load/store to inner loops ruining performance and code size */
  uint64_t uxi = ux.i;

  if (uy.i<<1 == 0 || isnan(y.value()) || ex == 0x7ff)
    return (x*y)/(x*y);
  if (uxi<<1 <= uy.i<<1) {
    if (uxi<<1 == uy.i<<1)
      return 0*x;
    return x;
  }

  /* normalize x and y */
  if (!ex) {
    for (i = uxi<<12; i>>63 == 0; ex--, i <<= 1);
    uxi <<= -ex + 1;
  } else {
    uxi &= -1ULL >> 12;
    uxi |= 1ULL << 52;
  }
  if (!ey) {
    for (i = uy.i<<12; i>>63 == 0; ey--, i <<= 1);
    uy.i <<= -ey + 1;
  } else {
    uy.i &= -1ULL >> 12;
    uy.i |= 1ULL << 52;
  }

  /* x mod y */
  for (; ex > ey; ex--) {
    i = uxi - uy.i;
    if (i >> 63 == 0) {
      if (i == 0)
        return 0*x;
      uxi = i;
    }
    uxi <<= 1;
  }
  i = uxi - uy.i;
  if (i >> 63 == 0) {
    if (i == 0)
      return 0*x;
    uxi = i;
  }
  for (; uxi>>52 == 0; uxi <<= 1, ex--);

  /* scale result */
  if (ex > 0) {
    uxi -= 1ULL << 52;
    uxi |= (uint64_t)ex << 52;
  } else {
    uxi >>= -ex + 1;
  }
  uxi |= (uint64_t)sx << 63;
  ux.i = uxi;
  return ux.f;
}

/*!
 * \brief normalize_angle_positive
 *
 *        Normalizes the angle to be 0 to 2*M_PI
 *        It takes and returns radians.
 */
static inline adouble normalize_angle_positive(adouble angle)
{
  return ad_fmod(ad_fmod(angle, 2.0*M_PI) + 2.0*M_PI, 2.0*M_PI);
}


void dae(adouble* deriv, adouble* path, adouble* state,
         adouble* input, adouble* parameters, adouble& time,
         adouble* xad, int iphase, Workspace* workspace)
{

  adouble xx[192];
  xx[0] = 0.7071067811865476;
  xx[1] = 0.5;
  xx[2] = xx[1] * state[2];
  xx[3] = xx[0] * cos(xx[2]);
  xx[4] = xx[0] * sin(xx[2]);
  xx[2] = - xx[4];
  xx[5] = - xx[3];
  xx[6] = xx[3];
  xx[7] = xx[2];
  xx[8] = xx[2];
  xx[2] = 2.0;
  xx[9] = xx[4] * state[1];
  xx[10] = xx[3] * state[1];
  xx[11] = xx[2] * (xx[3] * xx[9] + xx[4] * xx[10]);
  xx[12] = xx[11] + state[5];
  xx[13] = xx[4] * xx[9];
  xx[9] = xx[3] * xx[10];
  xx[10] = xx[2] * (xx[13] - xx[9]);
  xx[14] = xx[1] * state[4];
  xx[15] = xx[0] * cos(xx[14]);
  xx[16] = xx[0] * sin(xx[14]);
  xx[14] = xx[15] - xx[16];
  xx[17] = state[1] - xx[2] * (xx[9] + xx[13]) + state[3];
  xx[9] = xx[14] * xx[17];
  xx[13] = xx[15] + xx[16];
  xx[15] = xx[10] * xx[14];
  xx[16] = xx[10] + xx[2] * (xx[9] * xx[13] - xx[15] * xx[14]);
  xx[18] = xx[17] - xx[2] * (xx[15] * xx[13] + xx[9] * xx[14]);
  xx[19] = - xx[12];
  xx[20] = xx[16];
  xx[21] = xx[18];
  xx[9] = 4.166666666666641e-4;
  xx[15] = 0.08354166666666671;
  xx[22] = - (xx[9] * xx[12]);
  xx[23] = xx[15] * xx[16];
  xx[24] = xx[15] * xx[18];
  pm_math_Vector3_cross_ra(xx + 19, xx + 22, xx + 25);
  xx[22] = xx[1] * state[6];
  xx[23] = sin(xx[22]);
  xx[24] = xx[16] * xx[23];
  xx[28] = cos(xx[22]);
  xx[22] = xx[12] * xx[23];
  xx[29] = xx[2] * (xx[24] * xx[28] + xx[22] * xx[23]) - xx[12];
  xx[30] = xx[16] - xx[2] * (xx[24] * xx[23] - xx[22] * xx[28]);
  xx[22] = xx[18] + state[7];
  xx[31] = xx[29];
  xx[32] = xx[30];
  xx[33] = xx[22];
  xx[34] = xx[9] * xx[29];
  xx[35] = xx[15] * xx[30];
  xx[36] = xx[15] * xx[22];
  pm_math_Vector3_cross_ra(xx + 31, xx + 34, xx + 37);
  xx[24] = xx[1] * state[8];
  xx[34] = xx[0] * cos(xx[24]);
  xx[35] = xx[0] * sin(xx[24]);
  xx[40] = xx[34];
  xx[41] = - xx[34];
  xx[42] = xx[35];
  xx[43] = xx[35];
  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 31, xx + 44);
  xx[24] = xx[46] + state[9];
  xx[47] = xx[44];
  xx[48] = xx[45];
  xx[49] = xx[24];
  xx[50] = xx[9] * xx[44];
  xx[51] = xx[15] * xx[45];
  xx[52] = xx[15] * xx[24];
  pm_math_Vector3_cross_ra(xx + 47, xx + 50, xx + 53);
  xx[36] = xx[1] * state[10];
  xx[50] = xx[0] * cos(xx[36]);
  xx[51] = xx[0] * sin(xx[36]);
  xx[56] = xx[50];
  xx[57] = xx[50];
  xx[58] = - xx[51];
  xx[59] = xx[51];
  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 47, xx + 60);
  xx[36] = xx[62] + state[11];
  xx[63] = xx[60];
  xx[64] = xx[61];
  xx[65] = xx[36];
  xx[66] = xx[9] * xx[60];
  xx[67] = xx[15] * xx[61];
  xx[68] = xx[15] * xx[36];
  pm_math_Vector3_cross_ra(xx + 63, xx + 66, xx + 69);
  xx[52] = xx[1] * state[12];
  xx[66] = xx[0] * cos(xx[52]);
  xx[67] = xx[0] * sin(xx[52]);
  xx[72] = xx[66];
  xx[73] = - xx[66];
  xx[74] = xx[67];
  xx[75] = xx[67];
  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 63, xx + 76);
  xx[0] = xx[78] + state[13];
  xx[79] = xx[76];
  xx[80] = xx[77];
  xx[81] = xx[0];
  xx[82] = xx[9] * xx[76];
  xx[83] = xx[15] * xx[77];
  xx[84] = xx[15] * xx[0];
  pm_math_Vector3_cross_ra(xx + 79, xx + 82, xx + 85);
  xx[52] = xx[1] * xx[67];
  xx[68] = xx[52] * xx[67];
  xx[79] = xx[52] * xx[66];
  xx[80] = xx[1] - (xx[2] * (xx[68] + xx[68]) - xx[1]);
  xx[81] = - (xx[2] * (xx[79] - xx[79]));
  xx[82] = - (xx[2] * (xx[79] + xx[79]));
  pm_math_Vector3_cross_ra(xx + 63, xx + 80, xx + 88);
  pm_math_Vector3_cross_ra(xx + 63, xx + 88, xx + 91);
  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 91, xx + 63);
  xx[52] = 0.3335416666666667;

  xx[68] = (input[6] - (xx[87] + xx[1] * xx[64])) / xx[52];
  xx[88] = xx[85] + xx[9] * state[13] * xx[77];
  xx[89] = xx[86] - xx[15] * state[13] * xx[76];
  xx[90] = xx[87] + xx[15] * xx[68];
  pm_math_Quaternion_xform_ra(xx + 72, xx + 88, xx + 83);
  xx[77] = xx[1] * state[13];
  xx[86] = xx[63] - xx[77] * (xx[78] + xx[0]);
  xx[87] = xx[64] + xx[1] * xx[68];
  xx[88] = xx[77] * (xx[76] + xx[76]) + xx[65];
  pm_math_Quaternion_xform_ra(xx + 72, xx + 86, xx + 63);
  pm_math_Vector3_cross_ra(xx + 80, xx + 63, xx + 76);
  xx[0] = state[11] * xx[61];
  xx[61] = xx[66] * xx[66];
  xx[79] = 1.0;
  xx[86] = xx[2] * (xx[61] + xx[61]) - xx[79];
  xx[87] = xx[66] * xx[67];
  xx[66] = xx[2] * (xx[87] + xx[87]);
  xx[88] = xx[2] * (xx[87] - xx[87]);
  xx[89] = xx[87] - xx[87];
  xx[90] = xx[2] * xx[89];
  xx[91] = xx[67] * xx[67];
  xx[67] = xx[2] * (xx[61] + xx[91]) - xx[79];
  xx[92] = xx[2] * (xx[91] + xx[61]);
  xx[93] = xx[87] + xx[87];
  xx[87] = - (xx[2] * xx[93]);
  xx[94] = xx[2] * (xx[91] - xx[61]);
  xx[95] = xx[86];
  xx[96] = - xx[66];
  xx[97] = xx[88];
  xx[98] = xx[90];
  xx[99] = xx[67];
  xx[100] = xx[92];
  xx[101] = xx[87];
  xx[102] = xx[94];
  xx[103] = xx[67];
  xx[61] = 8.333333333333282e-4;
  xx[91] = xx[15] / xx[52];
  xx[104] = xx[15] - xx[15] * xx[91];
  xx[105] = xx[9] * xx[86];
  xx[106] = xx[61] * xx[89];
  xx[107] = - (xx[61] * xx[93]);
  xx[108] = - (xx[15] * xx[66]);
  xx[109] = xx[15] * xx[67];
  xx[110] = xx[15] * xx[94];
  xx[111] = xx[88] * xx[104];
  xx[112] = xx[92] * xx[104];
  xx[113] = xx[104] * xx[67];
  pm_math_Matrix3x3_compose_ra(xx + 95, xx + 105, xx + 114);
  xx[61] = xx[1] / xx[52];
  xx[52] = xx[15] * xx[61];
  xx[89] = xx[52] * xx[66];
  xx[93] = xx[88] * xx[89];
  xx[104] = xx[52] * xx[67];
  xx[105] = xx[88] * xx[104];
  xx[106] = xx[52] * xx[94];
  xx[52] = xx[88] * xx[106];
  xx[107] = xx[92] * xx[89];
  xx[108] = xx[92] * xx[104];
  xx[109] = xx[92] * xx[106];
  xx[110] = xx[89] * xx[67];
  xx[89] = xx[104] * xx[67];
  xx[104] = xx[106] * xx[67];
  xx[123] = xx[93];
  xx[124] = - xx[105];
  xx[125] = - xx[52];
  xx[126] = xx[107];
  xx[127] = - xx[108];
  xx[128] = - xx[109];
  xx[129] = xx[110];
  xx[130] = - xx[89];
  xx[131] = - xx[104];
  pm_math_Matrix3x3_postCross_ra(xx + 123, xx + 80, xx + 132);
  xx[106] = xx[79] - xx[1] * xx[61];
  xx[123] = xx[86];
  xx[124] = xx[90];
  xx[125] = xx[87];
  xx[126] = - (xx[66] * xx[106]);
  xx[127] = xx[106] * xx[67];
  xx[128] = xx[94] * xx[106];
  xx[129] = xx[88];
  xx[130] = xx[92];
  xx[131] = xx[67];
  pm_math_Matrix3x3_compose_ra(xx + 95, xx + 123, xx + 141);
  pm_math_Matrix3x3_postCross_ra(xx + 141, xx + 80, xx + 94);
  pm_math_Matrix3x3_preCross_ra(xx + 94, xx + 80, xx + 123);
  xx[66] = xx[9] + xx[114] - xx[132] - xx[132] - xx[123];
  xx[67] = state[11] * xx[60];
  xx[86] = xx[115] - xx[133] - xx[135] - xx[124];
  xx[87] = xx[93] - xx[94];
  xx[88] = xx[105] + xx[97];
  xx[90] = xx[52] + xx[100];
  xx[52] = xx[95] - xx[107];
  xx[92] = xx[108] + xx[98];
  xx[93] = xx[109] + xx[101];
  xx[94] = xx[110] - xx[96];
  xx[95] = xx[89] + xx[99];
  xx[89] = xx[104] + xx[102];
  xx[96] = xx[87];
  xx[97] = - xx[88];
  xx[98] = - xx[90];
  xx[99] = - xx[52];
  xx[100] = - xx[92];
  xx[101] = - xx[93];
  xx[102] = xx[94];
  xx[103] = - xx[95];
  xx[104] = - xx[89];
  xx[105] = xx[1] * xx[51];
  xx[106] = xx[105] * xx[51];
  xx[107] = xx[105] * xx[50];
  xx[108] = xx[1] - (xx[2] * (xx[106] + xx[106]) - xx[1]);
  xx[109] = - (xx[2] * (xx[107] - xx[107]));
  xx[110] = xx[2] * (xx[107] + xx[107]);
  pm_math_Vector3_cross_ra(xx + 47, xx + 108, xx + 105);
  pm_math_Vector3_cross_ra(xx + 47, xx + 105, xx + 111);
  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 111, xx + 47);
  xx[105] = xx[1] * state[11];
  xx[106] = xx[47] - xx[105] * (xx[62] + xx[36]);
  xx[36] = xx[105] * (xx[60] + xx[60]) + xx[49];
  xx[111] = xx[106];
  xx[112] = xx[48];
  xx[113] = xx[36];
  pm_math_Matrix3x3_xform_ra(xx + 96, xx + 111, xx + 150);
  xx[47] = xx[116] - xx[134] - xx[138] - xx[125];
  xx[49] = xx[47] - xx[1] * xx[88];
  xx[60] = xx[120] - xx[138] - xx[134] - xx[129];
  xx[62] = xx[121] - xx[139] - xx[137] - xx[130];
  xx[96] = xx[71] + xx[85] + xx[78] + xx[0] * xx[60] - xx[67] * xx[62] + xx[152];
  xx[97] = xx[79] + xx[145];
  xx[153] = xx[79] + xx[141];
  xx[154] = xx[142];
  xx[155] = xx[143];
  xx[156] = xx[144];
  xx[157] = xx[97];
  xx[158] = xx[146];
  xx[159] = xx[147];
  xx[160] = xx[148];
  xx[161] = xx[79] + xx[149];
  pm_math_Matrix3x3_xform_ra(xx + 153, xx + 111, xx + 98);
  xx[101] = xx[64] + xx[99] - (xx[0] * xx[88] - xx[67] * xx[92]);
  xx[64] = xx[15] + xx[122] - xx[140] - xx[140] - xx[131];
  xx[102] = xx[64] - xx[1] * xx[95];
  xx[103] = xx[1] * xx[97] - xx[95];
  xx[104] = xx[102] + xx[1] * xx[103];

  xx[105] = (input[5] - (xx[96] + xx[1] * xx[101])) / xx[104];
  xx[71] = xx[117] - xx[135] - xx[133] - xx[126];
  xx[78] = xx[15] + xx[118] - xx[136] - xx[136] - xx[127];
  xx[85] = xx[119] - xx[137] - xx[139] - xx[128];
  xx[107] = xx[85] - xx[1] * xx[92];
  xx[111] = xx[69] + xx[83] + xx[76] + xx[0] * xx[66] - xx[67] * xx[86] + xx[150]
            + xx[49] * xx[105];
  xx[112] = xx[70] + xx[84] + xx[77] + xx[0] * xx[71] - xx[67] * xx[78] + xx[151]
            + xx[107] * xx[105];
  xx[113] = xx[96] + xx[102] * xx[105];
  pm_math_Quaternion_xform_ra(xx + 56, xx + 111, xx + 114);
  xx[69] = xx[94] + xx[1] * xx[142];
  xx[70] = xx[1] * xx[148] - xx[89];
  xx[111] = xx[63] + xx[0] * xx[87] + xx[67] * xx[52] + xx[98] + xx[69] * xx[105];
  xx[112] = xx[101] + xx[103] * xx[105];
  xx[113] = xx[65] + xx[100] - (xx[0] * xx[90] - xx[67] * xx[93]) + xx[70] * xx
  [105];
  pm_math_Quaternion_xform_ra(xx + 56, xx + 111, xx + 98);
  pm_math_Vector3_cross_ra(xx + 108, xx + 98, xx + 111);
  xx[63] = state[9] * xx[45];
  xx[45] = xx[50] * xx[50];
  xx[65] = xx[50] * xx[51];
  xx[50] = xx[2] * (xx[65] + xx[65]);
  xx[76] = xx[2] * (xx[65] - xx[65]);
  xx[65] = xx[51] * xx[51];
  xx[51] = xx[2] * (xx[45] + xx[65]) - xx[79];
  xx[117] = xx[2] * (xx[45] + xx[45]) - xx[79];
  xx[118] = - xx[50];
  xx[119] = xx[76];
  xx[120] = xx[76];
  xx[121] = xx[51];
  xx[122] = - (xx[2] * (xx[65] + xx[45]));
  xx[123] = xx[50];
  xx[124] = xx[2] * (xx[45] - xx[65]);
  xx[125] = xx[51];
  xx[45] = xx[49] / xx[104];
  xx[50] = xx[107] * xx[45];
  xx[51] = xx[102] * xx[45];
  xx[65] = xx[107] / xx[104];
  xx[76] = xx[102] * xx[65];
  xx[77] = xx[102] / xx[104];
  xx[126] = xx[66] - xx[49] * xx[45];
  xx[127] = xx[86] - xx[50];
  xx[128] = xx[47] - xx[51];
  xx[129] = xx[71] - xx[50];
  xx[130] = xx[78] - xx[107] * xx[65];
  xx[131] = xx[85] - xx[76];
  xx[132] = xx[60] - xx[51];
  xx[133] = xx[62] - xx[76];
  xx[134] = xx[64] - xx[102] * xx[77];
  pm_math_Matrix3x3_composeTranspose_ra(xx + 126, xx + 117, xx + 150);
  pm_math_Matrix3x3_compose_ra(xx + 117, xx + 150, xx + 126);
  xx[47] = xx[69] / xx[104];
  xx[50] = xx[103] / xx[104];
  xx[51] = xx[70] / xx[104];
  xx[150] = xx[87] - xx[49] * xx[47];
  xx[151] = - (xx[88] + xx[49] * xx[50]);
  xx[152] = - (xx[90] + xx[49] * xx[51]);
  xx[153] = - (xx[52] + xx[107] * xx[47]);
  xx[154] = - (xx[92] + xx[107] * xx[50]);
  xx[155] = - (xx[93] + xx[107] * xx[51]);
  xx[156] = xx[94] - xx[102] * xx[47];
  xx[157] = - (xx[95] + xx[102] * xx[50]);
  xx[158] = - (xx[89] + xx[102] * xx[51]);
  pm_math_Matrix3x3_composeTranspose_ra(xx + 150, xx + 117, xx + 159);
  pm_math_Matrix3x3_compose_ra(xx + 117, xx + 159, xx + 150);
  pm_math_Matrix3x3_postCross_ra(xx + 150, xx + 108, xx + 159);
  xx[49] = xx[103] * xx[47];
  xx[52] = xx[70] * xx[47];
  xx[60] = xx[70] * xx[50];
  xx[168] = xx[141] - xx[69] * xx[47] + xx[79];
  xx[169] = xx[142] - xx[49];
  xx[170] = xx[143] - xx[52];
  xx[171] = xx[144] - xx[49];
  xx[172] = xx[97] - xx[103] * xx[50];
  xx[173] = xx[146] - xx[60];
  xx[174] = xx[147] - xx[52];
  xx[175] = xx[148] - xx[60];
  xx[176] = xx[149] - xx[70] * xx[51] + xx[79];
  pm_math_Matrix3x3_composeTranspose_ra(xx + 168, xx + 117, xx + 135);
  pm_math_Matrix3x3_compose_ra(xx + 117, xx + 135, xx + 168);
  pm_math_Matrix3x3_postCross_ra(xx + 168, xx + 108, xx + 117);
  pm_math_Matrix3x3_preCross_ra(xx + 117, xx + 108, xx + 135);
  xx[49] = xx[9] + xx[126] - xx[159] - xx[159] - xx[135];
  xx[52] = state[9] * xx[44];
  xx[60] = xx[127] - xx[160] - xx[162] - xx[136];
  xx[62] = xx[150] - xx[117];
  xx[64] = xx[151] - xx[120];
  xx[66] = xx[152] - xx[123];
  xx[69] = xx[153] - xx[118];
  xx[70] = xx[154] - xx[121];
  xx[71] = xx[155] - xx[124];
  xx[76] = xx[156] - xx[119];
  xx[78] = xx[157] - xx[122];
  xx[83] = xx[158] - xx[125];
  xx[117] = xx[62];
  xx[118] = xx[64];
  xx[119] = xx[66];
  xx[120] = xx[69];
  xx[121] = xx[70];
  xx[122] = xx[71];
  xx[123] = xx[76];
  xx[124] = xx[78];
  xx[125] = xx[83];
  xx[84] = xx[1] * xx[35];
  xx[85] = xx[84] * xx[35];
  xx[86] = xx[84] * xx[34];
  xx[87] = xx[1] - (xx[2] * (xx[85] + xx[85]) - xx[1]);
  xx[88] = - (xx[2] * (xx[86] - xx[86]));
  xx[89] = - (xx[2] * (xx[86] + xx[86]));
  pm_math_Vector3_cross_ra(xx + 31, xx + 87, xx + 84);
  pm_math_Vector3_cross_ra(xx + 31, xx + 84, xx + 92);
  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 92, xx + 31);
  xx[84] = xx[1] * state[9];
  xx[85] = xx[31] - xx[84] * (xx[46] + xx[24]);
  xx[24] = xx[84] * (xx[44] + xx[44]) + xx[33];
  xx[92] = xx[85];
  xx[93] = xx[32];
  xx[94] = xx[24];
  pm_math_Matrix3x3_xform_ra(xx + 117, xx + 92, xx + 95);
  xx[31] = xx[128] - xx[161] - xx[165] - xx[137];
  xx[33] = xx[31] + xx[1] * xx[64];
  xx[44] = xx[132] - xx[165] - xx[161] - xx[141];
  xx[46] = xx[133] - xx[166] - xx[164] - xx[142];
  xx[84] = xx[55] + xx[116] + xx[113] + xx[63] * xx[44] - xx[52] * xx[46] + xx
  [97];
  xx[86] = xx[79] + xx[172];
  xx[117] = xx[79] + xx[168];
  xx[118] = xx[169];
  xx[119] = xx[170];
  xx[120] = xx[171];
  xx[121] = xx[86];
  xx[122] = xx[173];
  xx[123] = xx[174];
  xx[124] = xx[175];
  xx[125] = xx[79] + xx[176];
  pm_math_Matrix3x3_xform_ra(xx + 117, xx + 92, xx + 101);
  xx[90] = xx[99] + xx[63] * xx[64] - xx[52] * xx[70] + xx[102];
  xx[92] = xx[15] + xx[134] - xx[167] - xx[167] - xx[143];
  xx[93] = xx[92] + xx[1] * xx[78];
  xx[94] = xx[78] + xx[1] * xx[86];
  xx[99] = xx[93] + xx[1] * xx[94];

  xx[104] = (input[4] - (xx[84] + xx[1] * xx[90])) / xx[99];
  xx[55] = xx[129] - xx[162] - xx[160] - xx[138];
  xx[107] = xx[15] + xx[130] - xx[163] - xx[163] - xx[139];
  xx[97] = xx[131] - xx[164] - xx[166] - xx[140];
  xx[113] = xx[97] + xx[1] * xx[70];
  xx[116] = xx[53] + xx[114] + xx[111] + xx[63] * xx[49] - xx[52] * xx[60] + xx
  [95] + xx[33] * xx[104];
  xx[117] = xx[54] + xx[115] + xx[112] + xx[63] * xx[55] - xx[52] * xx[107] +
            xx[96] + xx[113] * xx[104];
  xx[118] = xx[84] + xx[93] * xx[104];
  pm_math_Quaternion_xform_ra(xx + 40, xx + 116, xx + 119);
  xx[53] = xx[76] + xx[1] * xx[169];
  xx[54] = xx[83] + xx[1] * xx[175];
  xx[114] = xx[98] + xx[63] * xx[62] - xx[52] * xx[69] + xx[101] + xx[53] * xx
  [104];
  xx[115] = xx[90] + xx[94] * xx[104];
  xx[116] = xx[100] + xx[63] * xx[66] - xx[52] * xx[71] + xx[103] + xx[54] * xx
  [104];
  pm_math_Quaternion_xform_ra(xx + 40, xx + 114, xx + 100);
  pm_math_Vector3_cross_ra(xx + 87, xx + 100, xx + 114);
  xx[84] = xx[30] * state[7];
  xx[30] = xx[34] * xx[34];
  xx[90] = xx[34] * xx[35];
  xx[34] = xx[35] * xx[35];
  xx[35] = xx[2] * (xx[30] + xx[34]) - xx[79];
  xx[122] = xx[2] * (xx[30] + xx[30]) - xx[79];
  xx[123] = - (xx[2] * (xx[90] + xx[90]));
  xx[124] = xx[2] * (xx[90] - xx[90]);
  xx[125] = xx[2] * (xx[90] - xx[90]);
  xx[126] = xx[35];
  xx[127] = xx[2] * (xx[34] + xx[30]);
  xx[128] = - (xx[2] * (xx[90] + xx[90]));
  xx[129] = xx[2] * (xx[34] - xx[30]);
  xx[130] = xx[35];
  xx[30] = xx[33] / xx[99];
  xx[34] = xx[113] * xx[30];
  xx[35] = xx[93] * xx[30];
  xx[90] = xx[113] / xx[99];
  xx[95] = xx[93] * xx[90];
  xx[96] = xx[93] / xx[99];
  xx[131] = xx[49] - xx[33] * xx[30];
  xx[132] = xx[60] - xx[34];
  xx[133] = xx[31] - xx[35];
  xx[134] = xx[55] - xx[34];
  xx[135] = xx[107] - xx[113] * xx[90];
  xx[136] = xx[97] - xx[95];
  xx[137] = xx[44] - xx[35];
  xx[138] = xx[46] - xx[95];
  xx[139] = xx[92] - xx[93] * xx[96];
  pm_math_Matrix3x3_composeTranspose_ra(xx + 131, xx + 122, xx + 140);
  pm_math_Matrix3x3_compose_ra(xx + 122, xx + 140, xx + 131);
  xx[31] = xx[53] / xx[99];
  xx[34] = xx[94] / xx[99];
  xx[35] = xx[54] / xx[99];
  xx[140] = xx[62] - xx[33] * xx[31];
  xx[141] = xx[64] - xx[33] * xx[34];
  xx[142] = xx[66] - xx[33] * xx[35];
  xx[143] = xx[69] - xx[113] * xx[31];
  xx[144] = xx[70] - xx[113] * xx[34];
  xx[145] = xx[71] - xx[113] * xx[35];
  xx[146] = xx[76] - xx[93] * xx[31];
  xx[147] = xx[78] - xx[93] * xx[34];
  xx[148] = xx[83] - xx[93] * xx[35];
  pm_math_Matrix3x3_composeTranspose_ra(xx + 140, xx + 122, xx + 149);
  pm_math_Matrix3x3_compose_ra(xx + 122, xx + 149, xx + 140);
  pm_math_Matrix3x3_postCross_ra(xx + 140, xx + 87, xx + 149);
  xx[33] = xx[94] * xx[31];
  xx[44] = xx[54] * xx[31];
  xx[46] = xx[54] * xx[34];
  xx[158] = xx[168] - xx[53] * xx[31] + xx[79];
  xx[159] = xx[169] - xx[33];
  xx[160] = xx[170] - xx[44];
  xx[161] = xx[171] - xx[33];
  xx[162] = xx[86] - xx[94] * xx[34];
  xx[163] = xx[173] - xx[46];
  xx[164] = xx[174] - xx[44];
  xx[165] = xx[175] - xx[46];
  xx[166] = xx[176] - xx[54] * xx[35] + xx[79];
  pm_math_Matrix3x3_composeTranspose_ra(xx + 158, xx + 122, xx + 167);
  pm_math_Matrix3x3_compose_ra(xx + 122, xx + 167, xx + 158);
  pm_math_Matrix3x3_postCross_ra(xx + 158, xx + 87, xx + 122);
  pm_math_Matrix3x3_preCross_ra(xx + 122, xx + 87, xx + 167);
  xx[33] = xx[9] + xx[131] - xx[149] - xx[149] - xx[167];
  xx[44] = state[7] * xx[29];
  xx[46] = xx[132] - xx[150] - xx[152] - xx[168];
  xx[49] = xx[140] - xx[122];
  xx[53] = xx[141] - xx[125];
  xx[54] = xx[142] - xx[128];
  xx[55] = xx[143] - xx[123];
  xx[60] = xx[144] - xx[126];
  xx[62] = xx[145] - xx[129];
  xx[64] = xx[146] - xx[124];
  xx[66] = xx[147] - xx[127];
  xx[69] = xx[148] - xx[130];
  xx[122] = xx[49];
  xx[123] = xx[53];
  xx[124] = xx[54];
  xx[125] = xx[55];
  xx[126] = xx[60];
  xx[127] = xx[62];
  xx[128] = xx[64];
  xx[129] = xx[66];
  xx[130] = xx[69];
  xx[70] = xx[1] * xx[23];
  xx[71] = xx[2] * xx[70] * xx[28];
  xx[76] = xx[79] - xx[2] * xx[70] * xx[23];
  xx[92] = - (xx[71] * xx[18]);
  xx[93] = xx[18] * xx[76];
  xx[94] = - (xx[71] * xx[12] + xx[16] * xx[76]);
  pm_math_Vector3_cross_ra(xx + 19, xx + 92, xx + 97);
  xx[19] = xx[23] * xx[98];
  xx[20] = xx[23] * xx[97];
  xx[21] = xx[1] * state[7];
  xx[70] = xx[97] + xx[2] * (xx[19] * xx[28] - xx[20] * xx[23]) - xx[21] * (xx
                                                                            [18] + xx[22]);
  xx[22] = xx[98] - xx[2] * (xx[20] * xx[28] + xx[19] * xx[23]);
  xx[19] = xx[21] * (xx[29] + xx[29]) + xx[99];
  xx[92] = xx[70];
  xx[93] = xx[22];
  xx[94] = xx[19];
  pm_math_Matrix3x3_xform_ra(xx + 122, xx + 92, xx + 97);
  xx[20] = xx[133] - xx[151] - xx[155] - xx[169];
  xx[21] = xx[20] + xx[1] * xx[53];
  xx[29] = xx[137] - xx[155] - xx[151] - xx[173];
  xx[78] = xx[138] - xx[156] - xx[154] - xx[174];
  xx[83] = xx[39] + xx[121] + xx[116] + xx[84] * xx[29] - xx[44] * xx[78] + xx
  [99];
  xx[86] = xx[79] + xx[162];
  xx[122] = xx[79] + xx[158];
  xx[123] = xx[159];
  xx[124] = xx[160];
  xx[125] = xx[161];
  xx[126] = xx[86];
  xx[127] = xx[163];
  xx[128] = xx[164];
  xx[129] = xx[165];
  xx[130] = xx[79] + xx[166];
  pm_math_Matrix3x3_xform_ra(xx + 122, xx + 92, xx + 111);
  xx[92] = xx[101] + xx[84] * xx[53] - xx[44] * xx[60] + xx[112];
  xx[93] = xx[15] + xx[139] - xx[157] - xx[157] - xx[175];
  xx[94] = xx[93] + xx[1] * xx[66];
  xx[95] = xx[66] + xx[1] * xx[86];
  xx[101] = xx[94] + xx[1] * xx[95];

  xx[103] = (input[3] - (xx[83] + xx[1] * xx[92])) / xx[101];
  xx[107] = xx[37] + xx[119] + xx[114] + xx[84] * xx[33] - xx[44] * xx[46] + xx
  [97] + xx[21] * xx[103];
  xx[37] = xx[134] - xx[152] - xx[150] - xx[170];
  xx[39] = xx[15] + xx[135] - xx[153] - xx[153] - xx[171];
  xx[97] = xx[136] - xx[154] - xx[156] - xx[172];
  xx[99] = xx[97] + xx[1] * xx[60];
  xx[114] = xx[38] + xx[120] + xx[115] + xx[84] * xx[37] - xx[44] * xx[39] + xx
  [98] + xx[99] * xx[103];
  xx[38] = xx[114] * xx[23];
  xx[98] = xx[107] * xx[23];
  xx[115] = xx[69] + xx[1] * xx[165];
  xx[116] = xx[102] + xx[84] * xx[54] - xx[44] * xx[62] + xx[113] + xx[115] *
                                                                    xx[103];
  xx[102] = state[5] * xx[16];
  xx[16] = xx[28] * xx[28];
  xx[117] = xx[2] * (xx[16] + xx[23] * xx[23]) - xx[79];
  xx[118] = xx[21] / xx[101];
  xx[119] = xx[94] * xx[118];
  xx[120] = xx[117] * (xx[20] - xx[119]);
  xx[20] = xx[2] * xx[16] - xx[79];
  xx[16] = xx[2] * xx[28] * xx[23];
  xx[121] = xx[99] / xx[101];
  xx[122] = xx[94] * xx[121];
  xx[123] = xx[117] * (xx[97] - xx[122]);
  xx[97] = xx[64] + xx[1] * xx[159];
  xx[124] = xx[97] / xx[101];
  xx[125] = xx[49] - xx[21] * xx[124];
  xx[126] = xx[95] / xx[101];
  xx[127] = xx[53] - xx[21] * xx[126];
  xx[53] = xx[16] * xx[125] + xx[20] * xx[127];
  xx[128] = xx[55] - xx[99] * xx[124];
  xx[129] = xx[60] - xx[99] * xx[126];
  xx[60] = xx[16] * xx[128] + xx[20] * xx[129];
  xx[130] = xx[20] * xx[53] - xx[16] * xx[60];
  xx[131] = xx[20] * xx[125] - xx[16] * xx[127];
  xx[125] = xx[20] * xx[128] - xx[16] * xx[129];
  xx[127] = xx[20] * xx[131] - xx[16] * xx[125];
  xx[128] = xx[130] * xx[76] - xx[71] * xx[127];
  xx[129] = xx[115] / xx[101];
  xx[132] = xx[117] * (xx[69] - xx[94] * xx[129]) * xx[117];
  xx[69] = xx[71] * xx[132];
  xx[133] = xx[115] * xx[124];
  xx[134] = xx[164] - xx[133];
  xx[135] = xx[115] * xx[126];
  xx[136] = xx[165] - xx[135];
  xx[137] = xx[117] * (xx[16] * xx[134] + xx[20] * xx[136]);
  xx[138] = xx[117] * (xx[20] * xx[134] - xx[16] * xx[136]);
  xx[134] = xx[137] * xx[76] - xx[71] * xx[138];
  xx[136] = xx[120] * xx[20] - xx[16] * xx[123] + xx[128] + xx[69] + xx[71] *
                                                                     xx[134];
  xx[139] = xx[18] * state[5];
  xx[140] = xx[33] - xx[21] * xx[118];
  xx[33] = xx[99] * xx[118];
  xx[141] = xx[46] - xx[33];
  xx[46] = xx[16] * xx[140] + xx[20] * xx[141];
  xx[142] = xx[37] - xx[33];
  xx[33] = xx[39] - xx[99] * xx[121];
  xx[37] = xx[16] * xx[142] + xx[20] * xx[33];
  xx[39] = xx[117] * (xx[54] - xx[21] * xx[129]);
  xx[21] = xx[117] * (xx[62] - xx[99] * xx[129]);
  xx[54] = xx[39] * xx[20] - xx[16] * xx[21];
  xx[62] = xx[54] * xx[76];
  xx[99] = xx[16] * xx[39] + xx[21] * xx[20];
  xx[21] = xx[71] * xx[99];
  xx[39] = xx[117] * (xx[166] - xx[115] * xx[129] + xx[79]) * xx[117];
  xx[115] = xx[39] * xx[76];
  xx[143] = xx[20] * xx[46] - xx[16] * xx[37] - xx[62] + xx[21] - xx[71] * xx
  [115];
  xx[144] = xx[117] * (xx[160] - xx[133]);
  xx[133] = xx[117] * (xx[163] - xx[135]);
  xx[135] = xx[144] * xx[20] - xx[16] * xx[133];
  xx[145] = xx[71] * xx[135];
  xx[146] = xx[127] + xx[145];
  xx[127] = xx[16] * xx[144] + xx[133] * xx[20];
  xx[133] = xx[71] * xx[127];
  xx[144] = xx[130] + xx[133];
  xx[130] = xx[71] * xx[39];
  xx[147] = xx[54] + xx[130];
  xx[148] = xx[16] * xx[131] + xx[20] * xx[125];
  xx[125] = xx[135] * xx[76];
  xx[131] = xx[148] - xx[125];
  xx[149] = xx[16] * xx[53] + xx[20] * xx[60];
  xx[53] = xx[127] * xx[76];
  xx[60] = xx[149] - xx[53];
  xx[150] = xx[99] - xx[115];
  xx[151] = xx[64] - xx[94] * xx[124];
  xx[64] = xx[66] - xx[94] * xx[126];
  xx[66] = xx[117] * (xx[20] * xx[151] - xx[16] * xx[64]);
  xx[152] = xx[158] - xx[97] * xx[124] + xx[79];
  xx[153] = xx[95] * xx[124];
  xx[154] = xx[159] - xx[153];
  xx[155] = xx[16] * xx[152] + xx[20] * xx[154];
  xx[156] = xx[161] - xx[153];
  xx[153] = xx[86] - xx[95] * xx[126];
  xx[86] = xx[16] * xx[156] + xx[20] * xx[153];
  xx[157] = xx[20] * xx[155] - xx[16] * xx[86];
  xx[158] = xx[20] * xx[152] - xx[16] * xx[154];
  xx[152] = xx[20] * xx[156] - xx[16] * xx[153];
  xx[153] = xx[20] * xx[158] - xx[16] * xx[152];
  xx[154] = xx[157] * xx[76] - xx[71] * xx[153];
  xx[156] = xx[66] + xx[154];
  xx[159] = xx[117] * (xx[16] * xx[151] + xx[20] * xx[64]);
  xx[64] = xx[16] * xx[155] + xx[20] * xx[86];
  xx[86] = xx[16] * xx[158] + xx[20] * xx[152];
  xx[151] = xx[64] * xx[76] - xx[71] * xx[86];
  xx[152] = xx[159] + xx[151];
  xx[155] = xx[132] + xx[134];
  xx[160] = xx[146];
  xx[161] = xx[144];
  xx[162] = xx[147];
  xx[163] = xx[131];
  xx[164] = xx[60];
  xx[165] = xx[150];
  xx[166] = xx[156];
  xx[167] = xx[152];
  xx[168] = xx[155];
  xx[158] = xx[1] * xx[10];
  xx[169] = xx[1] * xx[17];
  xx[170] = 1.110223024625157e-16;
  xx[171] = xx[170] * state[5];
  xx[172] = xx[158] * xx[10] + xx[169] * xx[17] - xx[171] * (xx[18] + xx[18]);
  xx[17] = xx[158] * xx[11];
  xx[18] = xx[17] * xx[14];
  xx[158] = xx[169] * xx[11];
  xx[169] = xx[158] * xx[14];
  xx[173] = xx[2] * (xx[18] * xx[14] - xx[169] * xx[13]) - xx[17];
  xx[17] = xx[171] * (xx[11] + xx[12]) + xx[2] * (xx[18] * xx[13] + xx[169] *
                                                                    xx[14]) - xx[158];
  xx[174] = - xx[172];
  xx[175] = xx[173];
  xx[176] = xx[17];
  pm_math_Matrix3x3_xform_ra(xx + 160, xx + 174, xx + 177);
  xx[12] = xx[25] + xx[107] - xx[2] * (xx[38] * xx[28] + xx[98] * xx[23]) + xx
                                                                            [71] * xx[116] + xx[102] * xx[136] - xx[139] * xx[143] + xx[177];
  xx[18] = xx[20] * xx[140] - xx[16] * xx[141];
  xx[107] = xx[20] * xx[142] - xx[16] * xx[33];
  xx[33] = xx[71] * xx[54];
  xx[54] = xx[9] + xx[20] * xx[18] - xx[16] * xx[107] + xx[33] + xx[33] + xx[71]
                                                                          * xx[130];
  xx[9] = xx[170] * xx[144] + xx[54];
  xx[33] = xx[92] + xx[95] * xx[103];
  xx[92] = xx[100] + xx[84] * xx[49] - xx[44] * xx[55] + xx[111] + xx[97] * xx
  [103];
  xx[49] = xx[92] * xx[23];
  xx[55] = xx[33] * xx[23];
  xx[95] = xx[33] + xx[2] * (xx[49] * xx[28] - xx[55] * xx[23]);
  xx[33] = xx[79] + xx[64];
  xx[160] = xx[79] + xx[153];
  xx[161] = xx[157];
  xx[162] = xx[135];
  xx[163] = xx[86];
  xx[164] = xx[33];
  xx[165] = xx[127];
  xx[166] = xx[138];
  xx[167] = xx[137];
  xx[168] = xx[79] + xx[39];
  pm_math_Matrix3x3_xform_ra(xx + 160, xx + 174, xx + 111);
  xx[64] = xx[95] + xx[102] * xx[152] - xx[139] * xx[60] + xx[112];
  xx[86] = xx[170] * xx[33] + xx[144];
  xx[97] = xx[170] * xx[86] + xx[9];

  xx[100] = (input[2] + xx[170] * xx[64] + xx[12]) / xx[97];
  xx[138] = xx[10] * state[3];
  xx[10] = xx[13] * xx[13];
  xx[140] = xx[2] * (xx[10] + xx[14] * xx[14]) - xx[79];
  xx[141] = xx[9] / xx[97];
  xx[142] = xx[140] * (xx[54] - xx[9] * xx[141]) * xx[140];
  xx[54] = xx[11] * state[3];
  xx[11] = xx[2] * xx[10] - xx[79];
  xx[10] = xx[16] * xx[18] + xx[20] * xx[107] + xx[21] - xx[62] - xx[130] * xx
  [76];
  xx[18] = xx[170] * xx[60] + xx[10];
  xx[21] = xx[18] * xx[141];
  xx[62] = xx[143] - xx[21];
  xx[107] = xx[2] * xx[14] * xx[13];
  xx[130] = xx[29] - xx[119];
  xx[29] = xx[78] - xx[122];
  xx[78] = xx[117] * (xx[20] * xx[130] - xx[16] * xx[29]) + xx[69] + xx[128] -
           (xx[71] * xx[145] - xx[133] * xx[76]);
  xx[69] = xx[170] * xx[152] + xx[78];
  xx[119] = xx[69] * xx[141];
  xx[122] = xx[136] - xx[119];
  xx[128] = xx[86] / xx[97];
  xx[133] = xx[144] - xx[9] * xx[128];
  xx[136] = xx[170] * xx[137] + xx[147];
  xx[143] = xx[136] / xx[97];
  xx[144] = xx[147] - xx[9] * xx[143];
  xx[145] = xx[140] * (xx[107] * xx[133] + xx[11] * xx[144]);
  xx[147] = xx[1] * xx[145];
  xx[153] = xx[140] * (xx[11] * xx[62] - xx[107] * xx[122]) - xx[147];
  xx[158] = xx[140] * (xx[11] * xx[133] - xx[107] * xx[144]);
  xx[133] = xx[1] * xx[158];
  xx[144] = xx[140] * (xx[107] * xx[62] + xx[11] * xx[122]) + xx[133];
  xx[62] = xx[94] / xx[101];
  xx[101] = xx[159] * xx[76] - xx[71] * xx[66];
  xx[66] = xx[15] + xx[117] * (xx[93] - xx[94] * xx[62]) * xx[117] + xx[101] +
           xx[101] + xx[76] * xx[151] - xx[71] * xx[154];
  xx[93] = xx[132] * xx[76];
  xx[101] = xx[149] * xx[76] - xx[71] * xx[148];
  xx[122] = xx[117] * (xx[16] * xx[130] + xx[20] * xx[29]) - xx[93] + xx[101] -
            (xx[53] * xx[76] - xx[71] * xx[125]);
  xx[29] = xx[27] + xx[83] + xx[94] * xx[103] + xx[95] * xx[76] - xx[71] * (xx
                                                                            [92] - xx[2] * (xx[55] * xx[28] + xx[49] * xx[23])) + xx[102] * xx[66] - xx
                                                                                                                                                     [139] * xx[122] + xx[179] - xx[69] * xx[100];
  xx[25] = xx[16] * xx[120] + xx[123] * xx[20] + xx[101] - xx[93] - xx[76] * xx
  [134];
  xx[27] = xx[99] * xx[76];
  xx[49] = xx[15] + xx[16] * xx[46] + xx[20] * xx[37] - xx[27] - xx[27] + xx[115]
                                                                          * xx[76];
  xx[15] = xx[26] + xx[114] + xx[2] * (xx[98] * xx[28] - xx[38] * xx[23]) - xx
                                                                            [116] * xx[76] + xx[102] * xx[25] - xx[139] * xx[49] + xx[178] - xx[18] *
                                                                                                                                             xx[100];
  xx[16] = xx[14] * xx[15];
  xx[20] = xx[14] * xx[29];
  xx[26] = xx[64] - xx[86] * xx[100];
  xx[27] = xx[116] + xx[102] * xx[155] - xx[139] * xx[150] + xx[113] - xx[136] *
                                                                       xx[100];
  xx[37] = xx[14] * xx[27];
  xx[38] = xx[14] * xx[26];
  xx[46] = xx[140] * (xx[10] - xx[21]);
  xx[10] = xx[140] * (xx[78] - xx[119]);
  xx[21] = xx[107] * xx[46] + xx[10] * xx[11] + xx[133];
  xx[53] = xx[18] / xx[97];
  xx[55] = xx[49] - xx[18] * xx[53];
  xx[49] = xx[69] * xx[53];
  xx[64] = xx[25] - xx[49];
  xx[25] = xx[11] * xx[55] - xx[107] * xx[64];
  xx[78] = xx[122] - xx[49];
  xx[49] = xx[69] / xx[97];
  xx[83] = xx[66] - xx[69] * xx[49];
  xx[66] = xx[11] * xx[78] - xx[107] * xx[83];
  xx[92] = xx[60] - xx[18] * xx[128];
  xx[60] = xx[150] - xx[18] * xx[143];
  xx[93] = xx[107] * xx[92] + xx[11] * xx[60];
  xx[94] = xx[152] - xx[69] * xx[128];
  xx[95] = xx[155] - xx[69] * xx[143];
  xx[98] = xx[107] * xx[94] + xx[11] * xx[95];
  xx[99] = xx[107] * xx[93] + xx[11] * xx[98];
  xx[101] = xx[1] * xx[99];
  xx[111] = xx[11] * xx[92] - xx[107] * xx[60];
  xx[60] = xx[11] * xx[94] - xx[107] * xx[95];
  xx[92] = xx[11] * xx[111] - xx[107] * xx[60];
  xx[94] = xx[1] * xx[92];
  xx[95] = xx[33] - xx[86] * xx[128];
  xx[33] = xx[136] * xx[128];
  xx[112] = xx[127] - xx[33];
  xx[113] = xx[107] * xx[95] + xx[11] * xx[112];
  xx[114] = xx[137] - xx[33];
  xx[33] = xx[39] - xx[136] * xx[143] + xx[79];
  xx[39] = xx[107] * xx[114] + xx[11] * xx[33];
  xx[115] = xx[1] * (xx[11] * xx[113] - xx[107] * xx[39]);
  xx[116] = xx[107] * xx[25] + xx[11] * xx[66] - xx[101] + xx[94] - xx[1] * xx
  [115];
  xx[117] = xx[29] + xx[2] * (xx[16] * xx[13] - xx[20] * xx[14]) + xx[1] * (xx
                                                                            [26] - xx[2] * (xx[37] * xx[13] + xx[38] * xx[14])) + xx[138] * xx[21] + xx
                                                                                                                                                     [54] * xx[116];
  xx[26] = xx[107] * xx[55] + xx[11] * xx[64];
  xx[29] = xx[107] * xx[78] + xx[11] * xx[83];
  xx[55] = xx[107] * xx[111] + xx[11] * xx[60];
  xx[60] = xx[1] * xx[55];
  xx[64] = xx[11] * xx[95] - xx[107] * xx[112];
  xx[78] = xx[11] * xx[114] - xx[107] * xx[33];
  xx[33] = xx[1] * (xx[11] * xx[64] - xx[107] * xx[78]);
  xx[83] = xx[107] * xx[26] + xx[11] * xx[29] + xx[60] + xx[60] + xx[1] * xx[33];
  memcpy(xx + 60, xx + 83, 1 * sizeof(double));

  xx[95] = (input[1] - xx[117]) / xx[60];
  xx[111] = xx[46] * xx[11] - xx[107] * xx[10] - xx[147];
  xx[10] = xx[11] * xx[93] - xx[107] * xx[98];
  xx[46] = xx[1] * xx[10];
  xx[93] = xx[1] * (xx[107] * xx[113] + xx[11] * xx[39]);
  xx[39] = xx[11] * xx[25] - xx[107] * xx[66] - xx[46] - xx[46] + xx[1] * xx[93];
  xx[25] = xx[1] * (xx[107] * xx[64] + xx[11] * xx[78]);
  xx[46] = xx[11] * xx[26] - xx[107] * xx[29] + xx[94] - xx[101] - xx[1] * xx[25];
  xx[112] = xx[12] - xx[9] * xx[100] + xx[138] * xx[142] + xx[54] * xx[153] +
            xx[144] * xx[95];
  xx[113] = xx[15] - xx[2] * (xx[20] * xx[13] + xx[16] * xx[14]) - xx[1] * (xx
                                                                            [27] + xx[2] * (xx[38] * xx[13] - xx[37] * xx[14])) + xx[138] * xx[111] +
            xx[54] * xx[39] + xx[46] * xx[95];
  xx[114] = xx[117] + xx[83] * xx[95];
  pm_math_Quaternion_xform_ra(xx + 5, xx + 112, xx + 132);
  xx[12] = xx[3] * xx[3];
  xx[15] = xx[3] * xx[4];
  xx[16] = xx[4] * xx[4];
  xx[20] = xx[2] * (xx[12] + xx[16]) - xx[79];
  xx[159] = xx[2] * (xx[12] + xx[12]) - xx[79];
  xx[160] = - (xx[2] * (xx[15] + xx[15]));
  xx[161] = xx[2] * (xx[15] - xx[15]);
  xx[162] = xx[2] * (xx[15] - xx[15]);
  xx[163] = xx[20];
  xx[164] = xx[2] * (xx[16] + xx[12]);
  xx[165] = - (xx[2] * (xx[15] + xx[15]));
  xx[166] = xx[2] * (xx[16] - xx[12]);
  xx[167] = xx[20];
  xx[12] = xx[144] / xx[60];
  xx[15] = xx[46] * xx[12];
  xx[16] = xx[83] * xx[12];
  xx[20] = xx[46] / xx[60];
  xx[26] = xx[83] * xx[20];
  xx[27] = xx[83] / xx[60];
  xx[174] = xx[142] - xx[144] * xx[12];
  xx[175] = xx[153] - xx[15];
  xx[176] = xx[144] - xx[16];
  xx[177] = xx[111] - xx[15];
  xx[178] = xx[39] - xx[46] * xx[20];
  xx[179] = xx[46] - xx[26];
  xx[180] = xx[21] - xx[16];
  xx[181] = xx[116] - xx[26];
  xx[182] = xx[83] - xx[83] * xx[27];
  pm_math_Matrix3x3_composeTranspose_ra(xx + 174, xx + 159, xx + 147);
  pm_math_Matrix3x3_compose_ra(xx + 159, xx + 147, xx + 174);

  xx[15] = (xx[170] * xx[157] + xx[146]) / xx[97];
  xx[16] = xx[140] * (xx[131] - xx[18] * xx[15]);
  xx[18] = xx[140] * (xx[156] - xx[69] * xx[15]);
  xx[21] = xx[157] - xx[86] * xx[15];
  xx[26] = xx[135] - xx[136] * xx[15];
  xx[29] = xx[107] * xx[16] + xx[18] * xx[11] + xx[1] * xx[140] * (xx[11] * xx
  [21] - xx[107] * xx[26]);
  xx[37] = xx[29] / xx[60];
  xx[38] = xx[55] + xx[33];
  xx[33] = xx[38] / xx[60];
  xx[39] = xx[99] + xx[25];
  xx[25] = xx[39] / xx[60];
  xx[147] = xx[140] * (xx[146] - xx[9] * xx[15]) * xx[140] - xx[144] * xx[37];
  xx[148] = xx[158] - xx[144] * xx[33];
  xx[149] = xx[145] - xx[144] * xx[25];
  xx[150] = xx[16] * xx[11] - xx[107] * xx[18] - xx[1] * xx[140] * (xx[107] *
                                                                    xx[21] + xx[11] * xx[26]) - xx[46] * xx[37];
  xx[151] = xx[92] - xx[115] - xx[46] * xx[33];
  xx[152] = xx[10] - xx[93] - xx[46] * xx[25];
  xx[153] = xx[29] - xx[83] * xx[37];
  xx[154] = xx[38] - xx[83] * xx[33];
  xx[155] = xx[39] - xx[83] * xx[25];
  pm_math_Matrix3x3_composeTranspose_ra(xx + 147, xx + 159, xx + 183);
  pm_math_Matrix3x3_compose_ra(xx + 159, xx + 183, xx + 144);
  xx[9] = xx[150] / xx[182];
  xx[10] = xx[151] / xx[182];
  xx[11] = xx[152] / xx[182];
  xx[16] = 9.81;
  xx[18] = xx[1] * state[0];
  xx[21] = xx[1] * cos(xx[18]);
  xx[26] = xx[1] * sin(xx[18]);
  xx[18] = xx[21] - xx[26];
  xx[29] = xx[16] * xx[18];
  xx[38] = xx[21] + xx[26];
  xx[39] = xx[29] * xx[38];
  xx[46] = xx[21] - xx[26];
  xx[21] = xx[16] * xx[46];
  xx[26] = xx[21] * xx[38];
  xx[92] = - (xx[2] * (xx[39] + xx[26]));
  xx[93] = xx[16] - xx[2] * (xx[29] * xx[18] + xx[21] * xx[46]);
  xx[94] = xx[2] * (xx[26] - xx[39]);
  xx[16] = (input[0] - xx[134]) / xx[182] - pm_math_Vector3_dot_ra(xx + 9, xx +
                                                                           92);
  xx[9] = xx[12];
  xx[10] = xx[20];
  xx[11] = xx[27];
  xx[12] = xx[4] * xx[16];
  xx[18] = xx[3] * xx[16];
  xx[20] = xx[2] * (xx[3] * xx[12] + xx[4] * xx[18]);
  xx[21] = xx[4] * xx[12];
  xx[4] = xx[3] * xx[18];
  xx[3] = xx[2] * (xx[21] - xx[4]);
  xx[12] = xx[16] - xx[2] * (xx[4] + xx[21]);
  xx[97] = - xx[20];
  xx[98] = xx[3];
  xx[99] = xx[12];
  xx[111] = xx[37];
  xx[112] = xx[33];
  xx[113] = xx[25];
  pm_math_Quaternion_inverseXform_ra(xx + 5, xx + 92, xx + 25);
  xx[4] = xx[95] - (pm_math_Vector3_dot_ra(xx + 9, xx + 97) +
                    pm_math_Vector3_dot_ra(xx + 111, xx + 25));
  xx[5] = - xx[141];
  xx[6] = - xx[53];
  xx[7] = - xx[49];
  xx[8] = xx[138] - xx[20];
  xx[9] = xx[3] + xx[54];
  xx[3] = xx[12] + xx[4];
  xx[10] = xx[14] * xx[3];
  xx[11] = xx[14] * xx[9];
  xx[12] = xx[9] + xx[2] * (xx[10] * xx[13] - xx[11] * xx[14]);
  xx[18] = xx[3] - xx[2] * (xx[11] * xx[13] + xx[10] * xx[14]);
  xx[37] = xx[8];
  xx[38] = xx[12];
  xx[39] = xx[18];
  xx[53] = - xx[15];
  xx[54] = - xx[128];
  xx[55] = - xx[143];
  xx[10] = xx[26] + xx[1] * xx[3];
  xx[3] = xx[27] - xx[1] * xx[9];
  xx[9] = xx[14] * xx[3];
  xx[11] = xx[14] * xx[10];
  xx[15] = xx[10] + xx[2] * (xx[9] * xx[13] - xx[11] * xx[14]);
  xx[10] = xx[3] - xx[2] * (xx[11] * xx[13] + xx[9] * xx[14]);
  xx[92] = xx[25];
  xx[93] = xx[15];
  xx[94] = xx[10];
  xx[3] = xx[100] - (pm_math_Vector3_dot_ra(xx + 5, xx + 37) +
                     pm_math_Vector3_dot_ra(xx + 53, xx + 92));
  xx[5] = xx[118];
  xx[6] = xx[121];
  xx[7] = xx[62];
  xx[9] = xx[8] - xx[3];
  xx[8] = xx[12] - xx[139];
  xx[11] = xx[8] * xx[23];
  xx[12] = xx[9] * xx[23];
  xx[13] = xx[9] + xx[2] * (xx[11] * xx[28] - xx[12] * xx[23]);
  xx[14] = xx[8] - xx[2] * (xx[12] * xx[28] + xx[11] * xx[23]);
  xx[11] = xx[18] + xx[102];
  xx[37] = xx[13];
  xx[38] = xx[14];
  xx[39] = xx[11];
  xx[53] = xx[124];
  xx[54] = xx[126];
  xx[55] = xx[129];
  xx[12] = xx[25] - xx[172] - xx[71] * xx[11];
  xx[18] = xx[15] - xx[170] * xx[3] + xx[173] + xx[11] * xx[76];
  xx[15] = xx[18] * xx[23];
  xx[20] = xx[12] * xx[23];
  xx[21] = xx[12] + xx[2] * (xx[15] * xx[28] - xx[20] * xx[23]);
  xx[12] = xx[18] - xx[2] * (xx[20] * xx[28] + xx[15] * xx[23]);
  xx[2] = xx[10] + xx[17] - (xx[8] * xx[76] - xx[71] * xx[9]);
  xx[8] = xx[21];
  xx[9] = xx[12];
  xx[10] = xx[2];
  xx[15] = xx[103] - (pm_math_Vector3_dot_ra(xx + 5, xx + 37) +
                      pm_math_Vector3_dot_ra(xx + 53, xx + 8));
  xx[5] = xx[30];
  xx[6] = xx[90];
  xx[7] = xx[96];
  xx[8] = xx[13] + xx[84];
  xx[9] = xx[14] - xx[44];
  xx[10] = xx[11] + xx[15];
  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 8, xx + 25);
  xx[28] = xx[31];
  xx[29] = xx[34];
  xx[30] = xx[35];
  pm_math_Vector3_cross_ra(xx + 8, xx + 87, xx + 33);
  xx[8] = xx[21] + xx[70] + xx[33];
  xx[9] = xx[12] + xx[1] * xx[15] + xx[22] + xx[34];
  xx[10] = xx[2] + xx[19] + xx[35];
  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 8, xx + 11);
  xx[2] = xx[104] - (pm_math_Vector3_dot_ra(xx + 5, xx + 25) +
                     pm_math_Vector3_dot_ra(xx + 28, xx + 11));
  xx[5] = xx[45];
  xx[6] = xx[65];
  xx[7] = xx[77];
  xx[8] = xx[25] + xx[63];
  xx[9] = xx[26] - xx[52];
  xx[10] = xx[27] + xx[2];
  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 8, xx + 17);
  xx[20] = xx[47];
  xx[21] = xx[50];
  xx[22] = xx[51];
  pm_math_Vector3_cross_ra(xx + 8, xx + 108, xx + 25);
  xx[8] = xx[11] + xx[85] + xx[25];
  xx[9] = xx[12] + xx[1] * xx[2] + xx[32] + xx[26];
  xx[10] = xx[13] + xx[24] + xx[27];
  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 8, xx + 11);
  xx[8] = xx[105] - (pm_math_Vector3_dot_ra(xx + 5, xx + 17) +
                     pm_math_Vector3_dot_ra(xx + 20, xx + 11));
  xx[5] = xx[17] + xx[0];
  xx[6] = xx[18] - xx[67];
  xx[7] = xx[19] + xx[8];
  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 5, xx + 17);
  pm_math_Vector3_cross_ra(xx + 5, xx + 80, xx + 20);
  xx[5] = xx[11] + xx[106] + xx[20];
  xx[6] = xx[12] + xx[1] * xx[8] + xx[48] + xx[21];
  xx[7] = xx[13] + xx[36] + xx[22];
  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 5, xx + 9);
  deriv[0] = state[1];
  deriv[1] = xx[16];
  deriv[2] = state[3];
  deriv[3] = xx[4];
  deriv[4] = state[5];
  deriv[5] = xx[3];
  deriv[6] = state[7];
  deriv[7] = xx[15];
  deriv[8] = state[9];
  deriv[9] = xx[2];
  deriv[10] = state[11];
  deriv[11] = xx[8];
  deriv[12] = state[13];
  deriv[13] = xx[68] - (xx[91] * xx[19] + xx[61] * xx[10]);

//  for (int i=0; i<7; ++i)
//  {
////    std::cout << state[2*i] << std::endl;
//    assert(state[2*i] <= 2*M_PI);
//    assert(state[2*i] >= -0.00001);
//  }


//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//  adouble xx[192];
//  xx[0] = 0.7071067811865476;
//  xx[1] = 0.5;
//  xx[2] = xx[1] * state[2];
//  xx[3] = xx[0] * cos(xx[2]);
//  xx[4] = xx[0] * sin(xx[2]);
//  xx[2] = - xx[4];
//  xx[5] = - xx[3];
//  xx[6] = xx[3];
//  xx[7] = xx[2];
//  xx[8] = xx[2];
//  xx[2] = 2.0;
//  xx[9] = xx[4] * state[1];
//  xx[10] = xx[3] * state[1];
//  xx[11] = xx[2] * (xx[3] * xx[9] + xx[4] * xx[10]);
//  xx[12] = xx[11] + state[5];
//  xx[13] = xx[4] * xx[9];
//  xx[9] = xx[3] * xx[10];
//  xx[10] = xx[2] * (xx[13] - xx[9]);
//  xx[14] = xx[1] * state[4];
//  xx[15] = xx[0] * cos(xx[14]);
//  xx[16] = xx[0] * sin(xx[14]);
//  xx[14] = xx[15] - xx[16];
//  xx[17] = state[1] - xx[2] * (xx[9] + xx[13]) + state[3];
//  xx[9] = xx[14] * xx[17];
//  xx[13] = xx[15] + xx[16];
//  xx[15] = xx[10] * xx[14];
//  xx[16] = xx[10] + xx[2] * (xx[9] * xx[13] - xx[15] * xx[14]);
//  xx[18] = xx[17] - xx[2] * (xx[15] * xx[13] + xx[9] * xx[14]);
//  xx[19] = - xx[12];
//  xx[20] = xx[16];
//  xx[21] = xx[18];
//  xx[9] = 4.166666666666641e-4;
//  xx[15] = 0.08354166666666671;
//  xx[22] = - (xx[9] * xx[12]);
//  xx[23] = xx[15] * xx[16];
//  xx[24] = xx[15] * xx[18];
//  pm_math_Vector3_cross_ra(xx + 19, xx + 22, xx + 25);
//  xx[22] = xx[1] * state[6];
//  xx[23] = sin(xx[22]);
//  xx[24] = xx[16] * xx[23];
//  xx[28] = cos(xx[22]);
//  xx[22] = xx[12] * xx[23];
//  xx[29] = xx[2] * (xx[24] * xx[28] + xx[22] * xx[23]) - xx[12];
//  xx[30] = xx[16] - xx[2] * (xx[24] * xx[23] - xx[22] * xx[28]);
//  xx[22] = xx[18] + state[7];
//  xx[31] = xx[29];
//  xx[32] = xx[30];
//  xx[33] = xx[22];
//  xx[34] = xx[9] * xx[29];
//  xx[35] = xx[15] * xx[30];
//  xx[36] = xx[15] * xx[22];
//  pm_math_Vector3_cross_ra(xx + 31, xx + 34, xx + 37);
//  xx[24] = xx[1] * state[8];
//  xx[34] = xx[0] * cos(xx[24]);
//  xx[35] = xx[0] * sin(xx[24]);
//  xx[40] = xx[34];
//  xx[41] = - xx[34];
//  xx[42] = xx[35];
//  xx[43] = xx[35];
//  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 31, xx + 44);
//  xx[24] = xx[46] + state[9];
//  xx[47] = xx[44];
//  xx[48] = xx[45];
//  xx[49] = xx[24];
//  xx[50] = xx[9] * xx[44];
//  xx[51] = xx[15] * xx[45];
//  xx[52] = xx[15] * xx[24];
//  pm_math_Vector3_cross_ra(xx + 47, xx + 50, xx + 53);
//  xx[36] = xx[1] * state[10];
//  xx[50] = xx[0] * cos(xx[36]);
//  xx[51] = xx[0] * sin(xx[36]);
//  xx[56] = xx[50];
//  xx[57] = xx[50];
//  xx[58] = - xx[51];
//  xx[59] = xx[51];
//  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 47, xx + 60);
//  xx[36] = xx[62] + state[11];
//  xx[63] = xx[60];
//  xx[64] = xx[61];
//  xx[65] = xx[36];
//  xx[66] = xx[9] * xx[60];
//  xx[67] = xx[15] * xx[61];
//  xx[68] = xx[15] * xx[36];
//  pm_math_Vector3_cross_ra(xx + 63, xx + 66, xx + 69);
//  xx[52] = xx[1] * state[12];
//  xx[66] = xx[0] * cos(xx[52]);
//  xx[67] = xx[0] * sin(xx[52]);
//  xx[72] = xx[66];
//  xx[73] = - xx[66];
//  xx[74] = xx[67];
//  xx[75] = xx[67];
//  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 63, xx + 76);
//  xx[0] = xx[78] + state[13];
//  xx[79] = xx[76];
//  xx[80] = xx[77];
//  xx[81] = xx[0];
//  xx[82] = xx[9] * xx[76];
//  xx[83] = xx[15] * xx[77];
//  xx[84] = xx[15] * xx[0];
//  pm_math_Vector3_cross_ra(xx + 79, xx + 82, xx + 85);
//  xx[52] = xx[1] * xx[67];
//  xx[68] = xx[52] * xx[67];
//  xx[79] = xx[52] * xx[66];
//  xx[80] = xx[1] - (xx[2] * (xx[68] + xx[68]) - xx[1]);
//  xx[81] = - (xx[2] * (xx[79] - xx[79]));
//  xx[82] = - (xx[2] * (xx[79] + xx[79]));
//  pm_math_Vector3_cross_ra(xx + 63, xx + 80, xx + 88);
//  pm_math_Vector3_cross_ra(xx + 63, xx + 88, xx + 91);
//  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 91, xx + 63);
//  xx[52] = 0.3335416666666667;
//
//  xx[68] = (input[6] - (xx[87] + xx[1] * xx[64])) / xx[52];
//  xx[88] = xx[85] + xx[9] * state[13] * xx[77];
//  xx[89] = xx[86] - xx[15] * state[13] * xx[76];
//  xx[90] = xx[87] + xx[15] * xx[68];
//  pm_math_Quaternion_xform_ra(xx + 72, xx + 88, xx + 83);
//  xx[77] = xx[1] * state[13];
//  xx[86] = xx[63] - xx[77] * (xx[78] + xx[0]);
//  xx[87] = xx[64] + xx[1] * xx[68];
//  xx[88] = xx[77] * (xx[76] + xx[76]) + xx[65];
//  pm_math_Quaternion_xform_ra(xx + 72, xx + 86, xx + 63);
//  pm_math_Vector3_cross_ra(xx + 80, xx + 63, xx + 76);
//  xx[0] = state[11] * xx[61];
//  xx[61] = xx[66] * xx[66];
//  xx[79] = 1.0;
//  xx[86] = xx[2] * (xx[61] + xx[61]) - xx[79];
//  xx[87] = xx[66] * xx[67];
//  xx[66] = xx[2] * (xx[87] + xx[87]);
//  xx[88] = xx[2] * (xx[87] - xx[87]);
//  xx[89] = xx[87] - xx[87];
//  xx[90] = xx[2] * xx[89];
//  xx[91] = xx[67] * xx[67];
//  xx[67] = xx[2] * (xx[61] + xx[91]) - xx[79];
//  xx[92] = xx[2] * (xx[91] + xx[61]);
//  xx[93] = xx[87] + xx[87];
//  xx[87] = - (xx[2] * xx[93]);
//  xx[94] = xx[2] * (xx[91] - xx[61]);
//  xx[95] = xx[86];
//  xx[96] = - xx[66];
//  xx[97] = xx[88];
//  xx[98] = xx[90];
//  xx[99] = xx[67];
//  xx[100] = xx[92];
//  xx[101] = xx[87];
//  xx[102] = xx[94];
//  xx[103] = xx[67];
//  xx[61] = 8.333333333333282e-4;
//  xx[91] = xx[15] / xx[52];
//  xx[104] = xx[15] - xx[15] * xx[91];
//  xx[105] = xx[9] * xx[86];
//  xx[106] = xx[61] * xx[89];
//  xx[107] = - (xx[61] * xx[93]);
//  xx[108] = - (xx[15] * xx[66]);
//  xx[109] = xx[15] * xx[67];
//  xx[110] = xx[15] * xx[94];
//  xx[111] = xx[88] * xx[104];
//  xx[112] = xx[92] * xx[104];
//  xx[113] = xx[104] * xx[67];
//  pm_math_Matrix3x3_compose_ra(xx + 95, xx + 105, xx + 114);
//  xx[61] = xx[1] / xx[52];
//  xx[52] = xx[15] * xx[61];
//  xx[89] = xx[52] * xx[66];
//  xx[93] = xx[88] * xx[89];
//  xx[104] = xx[52] * xx[67];
//  xx[105] = xx[88] * xx[104];
//  xx[106] = xx[52] * xx[94];
//  xx[52] = xx[88] * xx[106];
//  xx[107] = xx[92] * xx[89];
//  xx[108] = xx[92] * xx[104];
//  xx[109] = xx[92] * xx[106];
//  xx[110] = xx[89] * xx[67];
//  xx[89] = xx[104] * xx[67];
//  xx[104] = xx[106] * xx[67];
//  xx[123] = xx[93];
//  xx[124] = - xx[105];
//  xx[125] = - xx[52];
//  xx[126] = xx[107];
//  xx[127] = - xx[108];
//  xx[128] = - xx[109];
//  xx[129] = xx[110];
//  xx[130] = - xx[89];
//  xx[131] = - xx[104];
//  pm_math_Matrix3x3_postCross_ra(xx + 123, xx + 80, xx + 132);
//  xx[106] = xx[79] - xx[1] * xx[61];
//  xx[123] = xx[86];
//  xx[124] = xx[90];
//  xx[125] = xx[87];
//  xx[126] = - (xx[66] * xx[106]);
//  xx[127] = xx[106] * xx[67];
//  xx[128] = xx[94] * xx[106];
//  xx[129] = xx[88];
//  xx[130] = xx[92];
//  xx[131] = xx[67];
//  pm_math_Matrix3x3_compose_ra(xx + 95, xx + 123, xx + 141);
//  pm_math_Matrix3x3_postCross_ra(xx + 141, xx + 80, xx + 94);
//  pm_math_Matrix3x3_preCross_ra(xx + 94, xx + 80, xx + 123);
//  xx[66] = xx[9] + xx[114] - xx[132] - xx[132] - xx[123];
//  xx[67] = state[11] * xx[60];
//  xx[86] = xx[115] - xx[133] - xx[135] - xx[124];
//  xx[87] = xx[93] - xx[94];
//  xx[88] = xx[105] + xx[97];
//  xx[90] = xx[52] + xx[100];
//  xx[52] = xx[95] - xx[107];
//  xx[92] = xx[108] + xx[98];
//  xx[93] = xx[109] + xx[101];
//  xx[94] = xx[110] - xx[96];
//  xx[95] = xx[89] + xx[99];
//  xx[89] = xx[104] + xx[102];
//  xx[96] = xx[87];
//  xx[97] = - xx[88];
//  xx[98] = - xx[90];
//  xx[99] = - xx[52];
//  xx[100] = - xx[92];
//  xx[101] = - xx[93];
//  xx[102] = xx[94];
//  xx[103] = - xx[95];
//  xx[104] = - xx[89];
//  xx[105] = xx[1] * xx[51];
//  xx[106] = xx[105] * xx[51];
//  xx[107] = xx[105] * xx[50];
//  xx[108] = xx[1] - (xx[2] * (xx[106] + xx[106]) - xx[1]);
//  xx[109] = - (xx[2] * (xx[107] - xx[107]));
//  xx[110] = xx[2] * (xx[107] + xx[107]);
//  pm_math_Vector3_cross_ra(xx + 47, xx + 108, xx + 105);
//  pm_math_Vector3_cross_ra(xx + 47, xx + 105, xx + 111);
//  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 111, xx + 47);
//  xx[105] = xx[1] * state[11];
//  xx[106] = xx[47] - xx[105] * (xx[62] + xx[36]);
//  xx[36] = xx[105] * (xx[60] + xx[60]) + xx[49];
//  xx[111] = xx[106];
//  xx[112] = xx[48];
//  xx[113] = xx[36];
//  pm_math_Matrix3x3_xform_ra(xx + 96, xx + 111, xx + 150);
//  xx[47] = xx[116] - xx[134] - xx[138] - xx[125];
//  xx[49] = xx[47] - xx[1] * xx[88];
//  xx[60] = xx[120] - xx[138] - xx[134] - xx[129];
//  xx[62] = xx[121] - xx[139] - xx[137] - xx[130];
//  xx[96] = xx[71] + xx[85] + xx[78] + xx[0] * xx[60] - xx[67] * xx[62] + xx[152];
//  xx[97] = xx[79] + xx[145];
//  xx[153] = xx[79] + xx[141];
//  xx[154] = xx[142];
//  xx[155] = xx[143];
//  xx[156] = xx[144];
//  xx[157] = xx[97];
//  xx[158] = xx[146];
//  xx[159] = xx[147];
//  xx[160] = xx[148];
//  xx[161] = xx[79] + xx[149];
//  pm_math_Matrix3x3_xform_ra(xx + 153, xx + 111, xx + 98);
//  xx[101] = xx[64] + xx[99] - (xx[0] * xx[88] - xx[67] * xx[92]);
//  xx[64] = xx[15] + xx[122] - xx[140] - xx[140] - xx[131];
//  xx[102] = xx[64] - xx[1] * xx[95];
//  xx[103] = xx[1] * xx[97] - xx[95];
//  xx[104] = xx[102] + xx[1] * xx[103];
//
//  xx[105] = (input[5] - (xx[96] + xx[1] * xx[101])) / xx[104];
//  xx[71] = xx[117] - xx[135] - xx[133] - xx[126];
//  xx[78] = xx[15] + xx[118] - xx[136] - xx[136] - xx[127];
//  xx[85] = xx[119] - xx[137] - xx[139] - xx[128];
//  xx[107] = xx[85] - xx[1] * xx[92];
//  xx[111] = xx[69] + xx[83] + xx[76] + xx[0] * xx[66] - xx[67] * xx[86] + xx[150]
//            + xx[49] * xx[105];
//  xx[112] = xx[70] + xx[84] + xx[77] + xx[0] * xx[71] - xx[67] * xx[78] + xx[151]
//            + xx[107] * xx[105];
//  xx[113] = xx[96] + xx[102] * xx[105];
//  pm_math_Quaternion_xform_ra(xx + 56, xx + 111, xx + 114);
//  xx[69] = xx[94] + xx[1] * xx[142];
//  xx[70] = xx[1] * xx[148] - xx[89];
//  xx[111] = xx[63] + xx[0] * xx[87] + xx[67] * xx[52] + xx[98] + xx[69] * xx[105];
//  xx[112] = xx[101] + xx[103] * xx[105];
//  xx[113] = xx[65] + xx[100] - (xx[0] * xx[90] - xx[67] * xx[93]) + xx[70] * xx
//  [105];
//  pm_math_Quaternion_xform_ra(xx + 56, xx + 111, xx + 98);
//  pm_math_Vector3_cross_ra(xx + 108, xx + 98, xx + 111);
//  xx[63] = state[9] * xx[45];
//  xx[45] = xx[50] * xx[50];
//  xx[65] = xx[50] * xx[51];
//  xx[50] = xx[2] * (xx[65] + xx[65]);
//  xx[76] = xx[2] * (xx[65] - xx[65]);
//  xx[65] = xx[51] * xx[51];
//  xx[51] = xx[2] * (xx[45] + xx[65]) - xx[79];
//  xx[117] = xx[2] * (xx[45] + xx[45]) - xx[79];
//  xx[118] = - xx[50];
//  xx[119] = xx[76];
//  xx[120] = xx[76];
//  xx[121] = xx[51];
//  xx[122] = - (xx[2] * (xx[65] + xx[45]));
//  xx[123] = xx[50];
//  xx[124] = xx[2] * (xx[45] - xx[65]);
//  xx[125] = xx[51];
//  xx[45] = xx[49] / xx[104];
//  xx[50] = xx[107] * xx[45];
//  xx[51] = xx[102] * xx[45];
//  xx[65] = xx[107] / xx[104];
//  xx[76] = xx[102] * xx[65];
//  xx[77] = xx[102] / xx[104];
//  xx[126] = xx[66] - xx[49] * xx[45];
//  xx[127] = xx[86] - xx[50];
//  xx[128] = xx[47] - xx[51];
//  xx[129] = xx[71] - xx[50];
//  xx[130] = xx[78] - xx[107] * xx[65];
//  xx[131] = xx[85] - xx[76];
//  xx[132] = xx[60] - xx[51];
//  xx[133] = xx[62] - xx[76];
//  xx[134] = xx[64] - xx[102] * xx[77];
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 126, xx + 117, xx + 150);
//  pm_math_Matrix3x3_compose_ra(xx + 117, xx + 150, xx + 126);
//  xx[47] = xx[69] / xx[104];
//  xx[50] = xx[103] / xx[104];
//  xx[51] = xx[70] / xx[104];
//  xx[150] = xx[87] - xx[49] * xx[47];
//  xx[151] = - (xx[88] + xx[49] * xx[50]);
//  xx[152] = - (xx[90] + xx[49] * xx[51]);
//  xx[153] = - (xx[52] + xx[107] * xx[47]);
//  xx[154] = - (xx[92] + xx[107] * xx[50]);
//  xx[155] = - (xx[93] + xx[107] * xx[51]);
//  xx[156] = xx[94] - xx[102] * xx[47];
//  xx[157] = - (xx[95] + xx[102] * xx[50]);
//  xx[158] = - (xx[89] + xx[102] * xx[51]);
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 150, xx + 117, xx + 159);
//  pm_math_Matrix3x3_compose_ra(xx + 117, xx + 159, xx + 150);
//  pm_math_Matrix3x3_postCross_ra(xx + 150, xx + 108, xx + 159);
//  xx[49] = xx[103] * xx[47];
//  xx[52] = xx[70] * xx[47];
//  xx[60] = xx[70] * xx[50];
//  xx[168] = xx[141] - xx[69] * xx[47] + xx[79];
//  xx[169] = xx[142] - xx[49];
//  xx[170] = xx[143] - xx[52];
//  xx[171] = xx[144] - xx[49];
//  xx[172] = xx[97] - xx[103] * xx[50];
//  xx[173] = xx[146] - xx[60];
//  xx[174] = xx[147] - xx[52];
//  xx[175] = xx[148] - xx[60];
//  xx[176] = xx[149] - xx[70] * xx[51] + xx[79];
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 168, xx + 117, xx + 135);
//  pm_math_Matrix3x3_compose_ra(xx + 117, xx + 135, xx + 168);
//  pm_math_Matrix3x3_postCross_ra(xx + 168, xx + 108, xx + 117);
//  pm_math_Matrix3x3_preCross_ra(xx + 117, xx + 108, xx + 135);
//  xx[49] = xx[9] + xx[126] - xx[159] - xx[159] - xx[135];
//  xx[52] = state[9] * xx[44];
//  xx[60] = xx[127] - xx[160] - xx[162] - xx[136];
//  xx[62] = xx[150] - xx[117];
//  xx[64] = xx[151] - xx[120];
//  xx[66] = xx[152] - xx[123];
//  xx[69] = xx[153] - xx[118];
//  xx[70] = xx[154] - xx[121];
//  xx[71] = xx[155] - xx[124];
//  xx[76] = xx[156] - xx[119];
//  xx[78] = xx[157] - xx[122];
//  xx[83] = xx[158] - xx[125];
//  xx[117] = xx[62];
//  xx[118] = xx[64];
//  xx[119] = xx[66];
//  xx[120] = xx[69];
//  xx[121] = xx[70];
//  xx[122] = xx[71];
//  xx[123] = xx[76];
//  xx[124] = xx[78];
//  xx[125] = xx[83];
//  xx[84] = xx[1] * xx[35];
//  xx[85] = xx[84] * xx[35];
//  xx[86] = xx[84] * xx[34];
//  xx[87] = xx[1] - (xx[2] * (xx[85] + xx[85]) - xx[1]);
//  xx[88] = - (xx[2] * (xx[86] - xx[86]));
//  xx[89] = - (xx[2] * (xx[86] + xx[86]));
//  pm_math_Vector3_cross_ra(xx + 31, xx + 87, xx + 84);
//  pm_math_Vector3_cross_ra(xx + 31, xx + 84, xx + 92);
//  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 92, xx + 31);
//  xx[84] = xx[1] * state[9];
//  xx[85] = xx[31] - xx[84] * (xx[46] + xx[24]);
//  xx[24] = xx[84] * (xx[44] + xx[44]) + xx[33];
//  xx[92] = xx[85];
//  xx[93] = xx[32];
//  xx[94] = xx[24];
//  pm_math_Matrix3x3_xform_ra(xx + 117, xx + 92, xx + 95);
//  xx[31] = xx[128] - xx[161] - xx[165] - xx[137];
//  xx[33] = xx[31] + xx[1] * xx[64];
//  xx[44] = xx[132] - xx[165] - xx[161] - xx[141];
//  xx[46] = xx[133] - xx[166] - xx[164] - xx[142];
//  xx[84] = xx[55] + xx[116] + xx[113] + xx[63] * xx[44] - xx[52] * xx[46] + xx
//  [97];
//  xx[86] = xx[79] + xx[172];
//  xx[117] = xx[79] + xx[168];
//  xx[118] = xx[169];
//  xx[119] = xx[170];
//  xx[120] = xx[171];
//  xx[121] = xx[86];
//  xx[122] = xx[173];
//  xx[123] = xx[174];
//  xx[124] = xx[175];
//  xx[125] = xx[79] + xx[176];
//  pm_math_Matrix3x3_xform_ra(xx + 117, xx + 92, xx + 101);
//  xx[90] = xx[99] + xx[63] * xx[64] - xx[52] * xx[70] + xx[102];
//  xx[92] = xx[15] + xx[134] - xx[167] - xx[167] - xx[143];
//  xx[93] = xx[92] + xx[1] * xx[78];
//  xx[94] = xx[78] + xx[1] * xx[86];
//  xx[99] = xx[93] + xx[1] * xx[94];
//
//  xx[104] = (input[4] - (xx[84] + xx[1] * xx[90])) / xx[99];
//  xx[55] = xx[129] - xx[162] - xx[160] - xx[138];
//  xx[107] = xx[15] + xx[130] - xx[163] - xx[163] - xx[139];
//  xx[97] = xx[131] - xx[164] - xx[166] - xx[140];
//  xx[113] = xx[97] + xx[1] * xx[70];
//  xx[116] = xx[53] + xx[114] + xx[111] + xx[63] * xx[49] - xx[52] * xx[60] + xx
//  [95] + xx[33] * xx[104];
//  xx[117] = xx[54] + xx[115] + xx[112] + xx[63] * xx[55] - xx[52] * xx[107] +
//            xx[96] + xx[113] * xx[104];
//  xx[118] = xx[84] + xx[93] * xx[104];
//  pm_math_Quaternion_xform_ra(xx + 40, xx + 116, xx + 119);
//  xx[53] = xx[76] + xx[1] * xx[169];
//  xx[54] = xx[83] + xx[1] * xx[175];
//  xx[114] = xx[98] + xx[63] * xx[62] - xx[52] * xx[69] + xx[101] + xx[53] * xx
//  [104];
//  xx[115] = xx[90] + xx[94] * xx[104];
//  xx[116] = xx[100] + xx[63] * xx[66] - xx[52] * xx[71] + xx[103] + xx[54] * xx
//  [104];
//  pm_math_Quaternion_xform_ra(xx + 40, xx + 114, xx + 100);
//  pm_math_Vector3_cross_ra(xx + 87, xx + 100, xx + 114);
//  xx[84] = xx[30] * state[7];
//  xx[30] = xx[34] * xx[34];
//  xx[90] = xx[34] * xx[35];
//  xx[34] = xx[35] * xx[35];
//  xx[35] = xx[2] * (xx[30] + xx[34]) - xx[79];
//  xx[122] = xx[2] * (xx[30] + xx[30]) - xx[79];
//  xx[123] = - (xx[2] * (xx[90] + xx[90]));
//  xx[124] = xx[2] * (xx[90] - xx[90]);
//  xx[125] = xx[2] * (xx[90] - xx[90]);
//  xx[126] = xx[35];
//  xx[127] = xx[2] * (xx[34] + xx[30]);
//  xx[128] = - (xx[2] * (xx[90] + xx[90]));
//  xx[129] = xx[2] * (xx[34] - xx[30]);
//  xx[130] = xx[35];
//  xx[30] = xx[33] / xx[99];
//  xx[34] = xx[113] * xx[30];
//  xx[35] = xx[93] * xx[30];
//  xx[90] = xx[113] / xx[99];
//  xx[95] = xx[93] * xx[90];
//  xx[96] = xx[93] / xx[99];
//  xx[131] = xx[49] - xx[33] * xx[30];
//  xx[132] = xx[60] - xx[34];
//  xx[133] = xx[31] - xx[35];
//  xx[134] = xx[55] - xx[34];
//  xx[135] = xx[107] - xx[113] * xx[90];
//  xx[136] = xx[97] - xx[95];
//  xx[137] = xx[44] - xx[35];
//  xx[138] = xx[46] - xx[95];
//  xx[139] = xx[92] - xx[93] * xx[96];
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 131, xx + 122, xx + 140);
//  pm_math_Matrix3x3_compose_ra(xx + 122, xx + 140, xx + 131);
//  xx[31] = xx[53] / xx[99];
//  xx[34] = xx[94] / xx[99];
//  xx[35] = xx[54] / xx[99];
//  xx[140] = xx[62] - xx[33] * xx[31];
//  xx[141] = xx[64] - xx[33] * xx[34];
//  xx[142] = xx[66] - xx[33] * xx[35];
//  xx[143] = xx[69] - xx[113] * xx[31];
//  xx[144] = xx[70] - xx[113] * xx[34];
//  xx[145] = xx[71] - xx[113] * xx[35];
//  xx[146] = xx[76] - xx[93] * xx[31];
//  xx[147] = xx[78] - xx[93] * xx[34];
//  xx[148] = xx[83] - xx[93] * xx[35];
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 140, xx + 122, xx + 149);
//  pm_math_Matrix3x3_compose_ra(xx + 122, xx + 149, xx + 140);
//  pm_math_Matrix3x3_postCross_ra(xx + 140, xx + 87, xx + 149);
//  xx[33] = xx[94] * xx[31];
//  xx[44] = xx[54] * xx[31];
//  xx[46] = xx[54] * xx[34];
//  xx[158] = xx[168] - xx[53] * xx[31] + xx[79];
//  xx[159] = xx[169] - xx[33];
//  xx[160] = xx[170] - xx[44];
//  xx[161] = xx[171] - xx[33];
//  xx[162] = xx[86] - xx[94] * xx[34];
//  xx[163] = xx[173] - xx[46];
//  xx[164] = xx[174] - xx[44];
//  xx[165] = xx[175] - xx[46];
//  xx[166] = xx[176] - xx[54] * xx[35] + xx[79];
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 158, xx + 122, xx + 167);
//  pm_math_Matrix3x3_compose_ra(xx + 122, xx + 167, xx + 158);
//  pm_math_Matrix3x3_postCross_ra(xx + 158, xx + 87, xx + 122);
//  pm_math_Matrix3x3_preCross_ra(xx + 122, xx + 87, xx + 167);
//  xx[33] = xx[9] + xx[131] - xx[149] - xx[149] - xx[167];
//  xx[44] = state[7] * xx[29];
//  xx[46] = xx[132] - xx[150] - xx[152] - xx[168];
//  xx[49] = xx[140] - xx[122];
//  xx[53] = xx[141] - xx[125];
//  xx[54] = xx[142] - xx[128];
//  xx[55] = xx[143] - xx[123];
//  xx[60] = xx[144] - xx[126];
//  xx[62] = xx[145] - xx[129];
//  xx[64] = xx[146] - xx[124];
//  xx[66] = xx[147] - xx[127];
//  xx[69] = xx[148] - xx[130];
//  xx[122] = xx[49];
//  xx[123] = xx[53];
//  xx[124] = xx[54];
//  xx[125] = xx[55];
//  xx[126] = xx[60];
//  xx[127] = xx[62];
//  xx[128] = xx[64];
//  xx[129] = xx[66];
//  xx[130] = xx[69];
//  xx[70] = xx[1] * xx[23];
//  xx[71] = xx[2] * xx[70] * xx[28];
//  xx[76] = xx[79] - xx[2] * xx[70] * xx[23];
//  xx[92] = - (xx[71] * xx[18]);
//  xx[93] = xx[18] * xx[76];
//  xx[94] = - (xx[71] * xx[12] + xx[16] * xx[76]);
//  pm_math_Vector3_cross_ra(xx + 19, xx + 92, xx + 97);
//  xx[19] = xx[23] * xx[98];
//  xx[20] = xx[23] * xx[97];
//  xx[21] = xx[1] * state[7];
//  xx[70] = xx[97] + xx[2] * (xx[19] * xx[28] - xx[20] * xx[23]) - xx[21] * (xx
//                                                                            [18] + xx[22]);
//  xx[22] = xx[98] - xx[2] * (xx[20] * xx[28] + xx[19] * xx[23]);
//  xx[19] = xx[21] * (xx[29] + xx[29]) + xx[99];
//  xx[92] = xx[70];
//  xx[93] = xx[22];
//  xx[94] = xx[19];
//  pm_math_Matrix3x3_xform_ra(xx + 122, xx + 92, xx + 97);
//  xx[20] = xx[133] - xx[151] - xx[155] - xx[169];
//  xx[21] = xx[20] + xx[1] * xx[53];
//  xx[29] = xx[137] - xx[155] - xx[151] - xx[173];
//  xx[78] = xx[138] - xx[156] - xx[154] - xx[174];
//  xx[83] = xx[39] + xx[121] + xx[116] + xx[84] * xx[29] - xx[44] * xx[78] + xx
//  [99];
//  xx[86] = xx[79] + xx[162];
//  xx[122] = xx[79] + xx[158];
//  xx[123] = xx[159];
//  xx[124] = xx[160];
//  xx[125] = xx[161];
//  xx[126] = xx[86];
//  xx[127] = xx[163];
//  xx[128] = xx[164];
//  xx[129] = xx[165];
//  xx[130] = xx[79] + xx[166];
//  pm_math_Matrix3x3_xform_ra(xx + 122, xx + 92, xx + 111);
//  xx[92] = xx[101] + xx[84] * xx[53] - xx[44] * xx[60] + xx[112];
//  xx[93] = xx[15] + xx[139] - xx[157] - xx[157] - xx[175];
//  xx[94] = xx[93] + xx[1] * xx[66];
//  xx[95] = xx[66] + xx[1] * xx[86];
//  xx[101] = xx[94] + xx[1] * xx[95];
//
//  xx[103] = (input[3] - (xx[83] + xx[1] * xx[92])) / xx[101];
//  xx[107] = xx[37] + xx[119] + xx[114] + xx[84] * xx[33] - xx[44] * xx[46] + xx
//  [97] + xx[21] * xx[103];
//  xx[37] = xx[134] - xx[152] - xx[150] - xx[170];
//  xx[39] = xx[15] + xx[135] - xx[153] - xx[153] - xx[171];
//  xx[97] = xx[136] - xx[154] - xx[156] - xx[172];
//  xx[99] = xx[97] + xx[1] * xx[60];
//  xx[114] = xx[38] + xx[120] + xx[115] + xx[84] * xx[37] - xx[44] * xx[39] + xx
//  [98] + xx[99] * xx[103];
//  xx[38] = xx[114] * xx[23];
//  xx[98] = xx[107] * xx[23];
//  xx[115] = xx[69] + xx[1] * xx[165];
//  xx[116] = xx[102] + xx[84] * xx[54] - xx[44] * xx[62] + xx[113] + xx[115] *
//                                                                    xx[103];
//  xx[102] = state[5] * xx[16];
//  xx[16] = xx[28] * xx[28];
//  xx[117] = xx[2] * (xx[16] + xx[23] * xx[23]) - xx[79];
//  xx[118] = xx[21] / xx[101];
//  xx[119] = xx[94] * xx[118];
//  xx[120] = xx[117] * (xx[20] - xx[119]);
//  xx[20] = xx[2] * xx[16] - xx[79];
//  xx[16] = xx[2] * xx[28] * xx[23];
//  xx[121] = xx[99] / xx[101];
//  xx[122] = xx[94] * xx[121];
//  xx[123] = xx[117] * (xx[97] - xx[122]);
//  xx[97] = xx[64] + xx[1] * xx[159];
//  xx[124] = xx[97] / xx[101];
//  xx[125] = xx[49] - xx[21] * xx[124];
//  xx[126] = xx[95] / xx[101];
//  xx[127] = xx[53] - xx[21] * xx[126];
//  xx[53] = xx[16] * xx[125] + xx[20] * xx[127];
//  xx[128] = xx[55] - xx[99] * xx[124];
//  xx[129] = xx[60] - xx[99] * xx[126];
//  xx[60] = xx[16] * xx[128] + xx[20] * xx[129];
//  xx[130] = xx[20] * xx[53] - xx[16] * xx[60];
//  xx[131] = xx[20] * xx[125] - xx[16] * xx[127];
//  xx[125] = xx[20] * xx[128] - xx[16] * xx[129];
//  xx[127] = xx[20] * xx[131] - xx[16] * xx[125];
//  xx[128] = xx[130] * xx[76] - xx[71] * xx[127];
//  xx[129] = xx[115] / xx[101];
//  xx[132] = xx[117] * (xx[69] - xx[94] * xx[129]) * xx[117];
//  xx[69] = xx[71] * xx[132];
//  xx[133] = xx[115] * xx[124];
//  xx[134] = xx[164] - xx[133];
//  xx[135] = xx[115] * xx[126];
//  xx[136] = xx[165] - xx[135];
//  xx[137] = xx[117] * (xx[16] * xx[134] + xx[20] * xx[136]);
//  xx[138] = xx[117] * (xx[20] * xx[134] - xx[16] * xx[136]);
//  xx[134] = xx[137] * xx[76] - xx[71] * xx[138];
//  xx[136] = xx[120] * xx[20] - xx[16] * xx[123] + xx[128] + xx[69] + xx[71] *
//                                                                     xx[134];
//  xx[139] = xx[18] * state[5];
//  xx[140] = xx[33] - xx[21] * xx[118];
//  xx[33] = xx[99] * xx[118];
//  xx[141] = xx[46] - xx[33];
//  xx[46] = xx[16] * xx[140] + xx[20] * xx[141];
//  xx[142] = xx[37] - xx[33];
//  xx[33] = xx[39] - xx[99] * xx[121];
//  xx[37] = xx[16] * xx[142] + xx[20] * xx[33];
//  xx[39] = xx[117] * (xx[54] - xx[21] * xx[129]);
//  xx[21] = xx[117] * (xx[62] - xx[99] * xx[129]);
//  xx[54] = xx[39] * xx[20] - xx[16] * xx[21];
//  xx[62] = xx[54] * xx[76];
//  xx[99] = xx[16] * xx[39] + xx[21] * xx[20];
//  xx[21] = xx[71] * xx[99];
//  xx[39] = xx[117] * (xx[166] - xx[115] * xx[129] + xx[79]) * xx[117];
//  xx[115] = xx[39] * xx[76];
//  xx[143] = xx[20] * xx[46] - xx[16] * xx[37] - xx[62] + xx[21] - xx[71] * xx
//  [115];
//  xx[144] = xx[117] * (xx[160] - xx[133]);
//  xx[133] = xx[117] * (xx[163] - xx[135]);
//  xx[135] = xx[144] * xx[20] - xx[16] * xx[133];
//  xx[145] = xx[71] * xx[135];
//  xx[146] = xx[127] + xx[145];
//  xx[127] = xx[16] * xx[144] + xx[133] * xx[20];
//  xx[133] = xx[71] * xx[127];
//  xx[144] = xx[130] + xx[133];
//  xx[130] = xx[71] * xx[39];
//  xx[147] = xx[54] + xx[130];
//  xx[148] = xx[16] * xx[131] + xx[20] * xx[125];
//  xx[125] = xx[135] * xx[76];
//  xx[131] = xx[148] - xx[125];
//  xx[149] = xx[16] * xx[53] + xx[20] * xx[60];
//  xx[53] = xx[127] * xx[76];
//  xx[60] = xx[149] - xx[53];
//  xx[150] = xx[99] - xx[115];
//  xx[151] = xx[64] - xx[94] * xx[124];
//  xx[64] = xx[66] - xx[94] * xx[126];
//  xx[66] = xx[117] * (xx[20] * xx[151] - xx[16] * xx[64]);
//  xx[152] = xx[158] - xx[97] * xx[124] + xx[79];
//  xx[153] = xx[95] * xx[124];
//  xx[154] = xx[159] - xx[153];
//  xx[155] = xx[16] * xx[152] + xx[20] * xx[154];
//  xx[156] = xx[161] - xx[153];
//  xx[153] = xx[86] - xx[95] * xx[126];
//  xx[86] = xx[16] * xx[156] + xx[20] * xx[153];
//  xx[157] = xx[20] * xx[155] - xx[16] * xx[86];
//  xx[158] = xx[20] * xx[152] - xx[16] * xx[154];
//  xx[152] = xx[20] * xx[156] - xx[16] * xx[153];
//  xx[153] = xx[20] * xx[158] - xx[16] * xx[152];
//  xx[154] = xx[157] * xx[76] - xx[71] * xx[153];
//  xx[156] = xx[66] + xx[154];
//  xx[159] = xx[117] * (xx[16] * xx[151] + xx[20] * xx[64]);
//  xx[64] = xx[16] * xx[155] + xx[20] * xx[86];
//  xx[86] = xx[16] * xx[158] + xx[20] * xx[152];
//  xx[151] = xx[64] * xx[76] - xx[71] * xx[86];
//  xx[152] = xx[159] + xx[151];
//  xx[155] = xx[132] + xx[134];
//  xx[160] = xx[146];
//  xx[161] = xx[144];
//  xx[162] = xx[147];
//  xx[163] = xx[131];
//  xx[164] = xx[60];
//  xx[165] = xx[150];
//  xx[166] = xx[156];
//  xx[167] = xx[152];
//  xx[168] = xx[155];
//  xx[158] = xx[1] * xx[10];
//  xx[169] = xx[1] * xx[17];
//  xx[170] = 1.110223024625157e-16;
//  xx[171] = xx[170] * state[5];
//  xx[172] = xx[158] * xx[10] + xx[169] * xx[17] - xx[171] * (xx[18] + xx[18]);
//  xx[17] = xx[158] * xx[11];
//  xx[18] = xx[17] * xx[14];
//  xx[158] = xx[169] * xx[11];
//  xx[169] = xx[158] * xx[14];
//  xx[173] = xx[2] * (xx[18] * xx[14] - xx[169] * xx[13]) - xx[17];
//  xx[17] = xx[171] * (xx[11] + xx[12]) + xx[2] * (xx[18] * xx[13] + xx[169] *
//                                                                    xx[14]) - xx[158];
//  xx[174] = - xx[172];
//  xx[175] = xx[173];
//  xx[176] = xx[17];
//  pm_math_Matrix3x3_xform_ra(xx + 160, xx + 174, xx + 177);
//  xx[12] = xx[25] + xx[107] - xx[2] * (xx[38] * xx[28] + xx[98] * xx[23]) + xx
//                                                                            [71] * xx[116] + xx[102] * xx[136] - xx[139] * xx[143] + xx[177];
//  xx[18] = xx[20] * xx[140] - xx[16] * xx[141];
//  xx[107] = xx[20] * xx[142] - xx[16] * xx[33];
//  xx[33] = xx[71] * xx[54];
//  xx[54] = xx[9] + xx[20] * xx[18] - xx[16] * xx[107] + xx[33] + xx[33] + xx[71]
//                                                                          * xx[130];
//  xx[9] = xx[170] * xx[144] + xx[54];
//  xx[33] = xx[92] + xx[95] * xx[103];
//  xx[92] = xx[100] + xx[84] * xx[49] - xx[44] * xx[55] + xx[111] + xx[97] * xx
//  [103];
//  xx[49] = xx[92] * xx[23];
//  xx[55] = xx[33] * xx[23];
//  xx[95] = xx[33] + xx[2] * (xx[49] * xx[28] - xx[55] * xx[23]);
//  xx[33] = xx[79] + xx[64];
//  xx[160] = xx[79] + xx[153];
//  xx[161] = xx[157];
//  xx[162] = xx[135];
//  xx[163] = xx[86];
//  xx[164] = xx[33];
//  xx[165] = xx[127];
//  xx[166] = xx[138];
//  xx[167] = xx[137];
//  xx[168] = xx[79] + xx[39];
//  pm_math_Matrix3x3_xform_ra(xx + 160, xx + 174, xx + 111);
//  xx[64] = xx[95] + xx[102] * xx[152] - xx[139] * xx[60] + xx[112];
//  xx[86] = xx[170] * xx[33] + xx[144];
//  xx[97] = xx[170] * xx[86] + xx[9];
//
//  xx[100] = (input[2] + xx[170] * xx[64] + xx[12]) / xx[97];
//  xx[138] = xx[10] * state[3];
//  xx[10] = xx[13] * xx[13];
//  xx[140] = xx[2] * (xx[10] + xx[14] * xx[14]) - xx[79];
//  xx[141] = xx[9] / xx[97];
//  xx[142] = xx[140] * (xx[54] - xx[9] * xx[141]) * xx[140];
//  xx[54] = xx[11] * state[3];
//  xx[11] = xx[2] * xx[10] - xx[79];
//  xx[10] = xx[16] * xx[18] + xx[20] * xx[107] + xx[21] - xx[62] - xx[130] * xx
//  [76];
//  xx[18] = xx[170] * xx[60] + xx[10];
//  xx[21] = xx[18] * xx[141];
//  xx[62] = xx[143] - xx[21];
//  xx[107] = xx[2] * xx[14] * xx[13];
//  xx[130] = xx[29] - xx[119];
//  xx[29] = xx[78] - xx[122];
//  xx[78] = xx[117] * (xx[20] * xx[130] - xx[16] * xx[29]) + xx[69] + xx[128] -
//           (xx[71] * xx[145] - xx[133] * xx[76]);
//  xx[69] = xx[170] * xx[152] + xx[78];
//  xx[119] = xx[69] * xx[141];
//  xx[122] = xx[136] - xx[119];
//  xx[128] = xx[86] / xx[97];
//  xx[133] = xx[144] - xx[9] * xx[128];
//  xx[136] = xx[170] * xx[137] + xx[147];
//  xx[143] = xx[136] / xx[97];
//  xx[144] = xx[147] - xx[9] * xx[143];
//  xx[145] = xx[140] * (xx[107] * xx[133] + xx[11] * xx[144]);
//  xx[147] = xx[1] * xx[145];
//  xx[153] = xx[140] * (xx[11] * xx[62] - xx[107] * xx[122]) - xx[147];
//  xx[158] = xx[140] * (xx[11] * xx[133] - xx[107] * xx[144]);
//  xx[133] = xx[1] * xx[158];
//  xx[144] = xx[140] * (xx[107] * xx[62] + xx[11] * xx[122]) + xx[133];
//  xx[62] = xx[94] / xx[101];
//  xx[101] = xx[159] * xx[76] - xx[71] * xx[66];
//  xx[66] = xx[15] + xx[117] * (xx[93] - xx[94] * xx[62]) * xx[117] + xx[101] +
//           xx[101] + xx[76] * xx[151] - xx[71] * xx[154];
//  xx[93] = xx[132] * xx[76];
//  xx[101] = xx[149] * xx[76] - xx[71] * xx[148];
//  xx[122] = xx[117] * (xx[16] * xx[130] + xx[20] * xx[29]) - xx[93] + xx[101] -
//            (xx[53] * xx[76] - xx[71] * xx[125]);
//  xx[29] = xx[27] + xx[83] + xx[94] * xx[103] + xx[95] * xx[76] - xx[71] * (xx
//                                                                            [92] - xx[2] * (xx[55] * xx[28] + xx[49] * xx[23])) + xx[102] * xx[66] - xx
//                                                                                                                                                     [139] * xx[122] + xx[179] - xx[69] * xx[100];
//  xx[25] = xx[16] * xx[120] + xx[123] * xx[20] + xx[101] - xx[93] - xx[76] * xx
//  [134];
//  xx[27] = xx[99] * xx[76];
//  xx[49] = xx[15] + xx[16] * xx[46] + xx[20] * xx[37] - xx[27] - xx[27] + xx[115]
//                                                                          * xx[76];
//  xx[15] = xx[26] + xx[114] + xx[2] * (xx[98] * xx[28] - xx[38] * xx[23]) - xx
//                                                                            [116] * xx[76] + xx[102] * xx[25] - xx[139] * xx[49] + xx[178] - xx[18] *
//                                                                                                                                             xx[100];
//  xx[16] = xx[14] * xx[15];
//  xx[20] = xx[14] * xx[29];
//  xx[26] = xx[64] - xx[86] * xx[100];
//  xx[27] = xx[116] + xx[102] * xx[155] - xx[139] * xx[150] + xx[113] - xx[136] *
//                                                                       xx[100];
//  xx[37] = xx[14] * xx[27];
//  xx[38] = xx[14] * xx[26];
//  xx[46] = xx[140] * (xx[10] - xx[21]);
//  xx[10] = xx[140] * (xx[78] - xx[119]);
//  xx[21] = xx[107] * xx[46] + xx[10] * xx[11] + xx[133];
//  xx[53] = xx[18] / xx[97];
//  xx[55] = xx[49] - xx[18] * xx[53];
//  xx[49] = xx[69] * xx[53];
//  xx[64] = xx[25] - xx[49];
//  xx[25] = xx[11] * xx[55] - xx[107] * xx[64];
//  xx[78] = xx[122] - xx[49];
//  xx[49] = xx[69] / xx[97];
//  xx[83] = xx[66] - xx[69] * xx[49];
//  xx[66] = xx[11] * xx[78] - xx[107] * xx[83];
//  xx[92] = xx[60] - xx[18] * xx[128];
//  xx[60] = xx[150] - xx[18] * xx[143];
//  xx[93] = xx[107] * xx[92] + xx[11] * xx[60];
//  xx[94] = xx[152] - xx[69] * xx[128];
//  xx[95] = xx[155] - xx[69] * xx[143];
//  xx[98] = xx[107] * xx[94] + xx[11] * xx[95];
//  xx[99] = xx[107] * xx[93] + xx[11] * xx[98];
//  xx[101] = xx[1] * xx[99];
//  xx[111] = xx[11] * xx[92] - xx[107] * xx[60];
//  xx[60] = xx[11] * xx[94] - xx[107] * xx[95];
//  xx[92] = xx[11] * xx[111] - xx[107] * xx[60];
//  xx[94] = xx[1] * xx[92];
//  xx[95] = xx[33] - xx[86] * xx[128];
//  xx[33] = xx[136] * xx[128];
//  xx[112] = xx[127] - xx[33];
//  xx[113] = xx[107] * xx[95] + xx[11] * xx[112];
//  xx[114] = xx[137] - xx[33];
//  xx[33] = xx[39] - xx[136] * xx[143] + xx[79];
//  xx[39] = xx[107] * xx[114] + xx[11] * xx[33];
//  xx[115] = xx[1] * (xx[11] * xx[113] - xx[107] * xx[39]);
//  xx[116] = xx[107] * xx[25] + xx[11] * xx[66] - xx[101] + xx[94] - xx[1] * xx
//  [115];
//  xx[117] = xx[29] + xx[2] * (xx[16] * xx[13] - xx[20] * xx[14]) + xx[1] * (xx
//                                                                            [26] - xx[2] * (xx[37] * xx[13] + xx[38] * xx[14])) + xx[138] * xx[21] + xx
//                                                                                                                                                     [54] * xx[116];
//  xx[26] = xx[107] * xx[55] + xx[11] * xx[64];
//  xx[29] = xx[107] * xx[78] + xx[11] * xx[83];
//  xx[55] = xx[107] * xx[111] + xx[11] * xx[60];
//  xx[60] = xx[1] * xx[55];
//  xx[64] = xx[11] * xx[95] - xx[107] * xx[112];
//  xx[78] = xx[11] * xx[114] - xx[107] * xx[33];
//  xx[33] = xx[1] * (xx[11] * xx[64] - xx[107] * xx[78]);
//  xx[83] = xx[107] * xx[26] + xx[11] * xx[29] + xx[60] + xx[60] + xx[1] * xx[33];
//  memcpy(xx + 60, xx + 83, 1 * sizeof(double));
//
//  xx[95] = (input[1] - xx[117]) / xx[60];
//  xx[111] = xx[46] * xx[11] - xx[107] * xx[10] - xx[147];
//  xx[10] = xx[11] * xx[93] - xx[107] * xx[98];
//  xx[46] = xx[1] * xx[10];
//  xx[93] = xx[1] * (xx[107] * xx[113] + xx[11] * xx[39]);
//  xx[39] = xx[11] * xx[25] - xx[107] * xx[66] - xx[46] - xx[46] + xx[1] * xx[93];
//  xx[25] = xx[1] * (xx[107] * xx[64] + xx[11] * xx[78]);
//  xx[46] = xx[11] * xx[26] - xx[107] * xx[29] + xx[94] - xx[101] - xx[1] * xx[25];
//  xx[112] = xx[12] - xx[9] * xx[100] + xx[138] * xx[142] + xx[54] * xx[153] +
//            xx[144] * xx[95];
//  xx[113] = xx[15] - xx[2] * (xx[20] * xx[13] + xx[16] * xx[14]) - xx[1] * (xx
//                                                                            [27] + xx[2] * (xx[38] * xx[13] - xx[37] * xx[14])) + xx[138] * xx[111] +
//            xx[54] * xx[39] + xx[46] * xx[95];
//  xx[114] = xx[117] + xx[83] * xx[95];
//  pm_math_Quaternion_xform_ra(xx + 5, xx + 112, xx + 132);
//  xx[12] = xx[3] * xx[3];
//  xx[15] = xx[3] * xx[4];
//  xx[16] = xx[4] * xx[4];
//  xx[20] = xx[2] * (xx[12] + xx[16]) - xx[79];
//  xx[159] = xx[2] * (xx[12] + xx[12]) - xx[79];
//  xx[160] = - (xx[2] * (xx[15] + xx[15]));
//  xx[161] = xx[2] * (xx[15] - xx[15]);
//  xx[162] = xx[2] * (xx[15] - xx[15]);
//  xx[163] = xx[20];
//  xx[164] = xx[2] * (xx[16] + xx[12]);
//  xx[165] = - (xx[2] * (xx[15] + xx[15]));
//  xx[166] = xx[2] * (xx[16] - xx[12]);
//  xx[167] = xx[20];
//  xx[12] = xx[144] / xx[60];
//  xx[15] = xx[46] * xx[12];
//  xx[16] = xx[83] * xx[12];
//  xx[20] = xx[46] / xx[60];
//  xx[26] = xx[83] * xx[20];
//  xx[27] = xx[83] / xx[60];
//  xx[174] = xx[142] - xx[144] * xx[12];
//  xx[175] = xx[153] - xx[15];
//  xx[176] = xx[144] - xx[16];
//  xx[177] = xx[111] - xx[15];
//  xx[178] = xx[39] - xx[46] * xx[20];
//  xx[179] = xx[46] - xx[26];
//  xx[180] = xx[21] - xx[16];
//  xx[181] = xx[116] - xx[26];
//  xx[182] = xx[83] - xx[83] * xx[27];
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 174, xx + 159, xx + 147);
//  pm_math_Matrix3x3_compose_ra(xx + 159, xx + 147, xx + 174);
//
//  xx[15] = (xx[170] * xx[157] + xx[146]) / xx[97];
//  xx[16] = xx[140] * (xx[131] - xx[18] * xx[15]);
//  xx[18] = xx[140] * (xx[156] - xx[69] * xx[15]);
//  xx[21] = xx[157] - xx[86] * xx[15];
//  xx[26] = xx[135] - xx[136] * xx[15];
//  xx[29] = xx[107] * xx[16] + xx[18] * xx[11] + xx[1] * xx[140] * (xx[11] * xx
//  [21] - xx[107] * xx[26]);
//  xx[37] = xx[29] / xx[60];
//  xx[38] = xx[55] + xx[33];
//  xx[33] = xx[38] / xx[60];
//  xx[39] = xx[99] + xx[25];
//  xx[25] = xx[39] / xx[60];
//  xx[147] = xx[140] * (xx[146] - xx[9] * xx[15]) * xx[140] - xx[144] * xx[37];
//  xx[148] = xx[158] - xx[144] * xx[33];
//  xx[149] = xx[145] - xx[144] * xx[25];
//  xx[150] = xx[16] * xx[11] - xx[107] * xx[18] - xx[1] * xx[140] * (xx[107] *
//                                                                    xx[21] + xx[11] * xx[26]) - xx[46] * xx[37];
//  xx[151] = xx[92] - xx[115] - xx[46] * xx[33];
//  xx[152] = xx[10] - xx[93] - xx[46] * xx[25];
//  xx[153] = xx[29] - xx[83] * xx[37];
//  xx[154] = xx[38] - xx[83] * xx[33];
//  xx[155] = xx[39] - xx[83] * xx[25];
//  pm_math_Matrix3x3_composeTranspose_ra(xx + 147, xx + 159, xx + 183);
//  pm_math_Matrix3x3_compose_ra(xx + 159, xx + 183, xx + 144);
//  xx[9] = xx[150] / xx[182];
//  xx[10] = xx[151] / xx[182];
//  xx[11] = xx[152] / xx[182];
//  xx[16] = 9.81;
//  xx[18] = xx[1] * state[0];
//  xx[21] = xx[1] * cos(xx[18]);
//  xx[26] = xx[1] * sin(xx[18]);
//  xx[18] = xx[21] - xx[26];
//  xx[29] = xx[16] * xx[18];
//  xx[38] = xx[21] + xx[26];
//  xx[39] = xx[29] * xx[38];
//  xx[46] = xx[21] - xx[26];
//  xx[21] = xx[16] * xx[46];
//  xx[26] = xx[21] * xx[38];
//  xx[92] = - (xx[2] * (xx[39] + xx[26]));
//  xx[93] = xx[16] - xx[2] * (xx[29] * xx[18] + xx[21] * xx[46]);
//  xx[94] = xx[2] * (xx[26] - xx[39]);
//  xx[16] = (input[0] - xx[134]) / xx[182] - pm_math_Vector3_dot_ra(xx + 9, xx +
//                                                                           92);
//  xx[9] = xx[12];
//  xx[10] = xx[20];
//  xx[11] = xx[27];
//  xx[12] = xx[4] * xx[16];
//  xx[18] = xx[3] * xx[16];
//  xx[20] = xx[2] * (xx[3] * xx[12] + xx[4] * xx[18]);
//  xx[21] = xx[4] * xx[12];
//  xx[4] = xx[3] * xx[18];
//  xx[3] = xx[2] * (xx[21] - xx[4]);
//  xx[12] = xx[16] - xx[2] * (xx[4] + xx[21]);
//  xx[97] = - xx[20];
//  xx[98] = xx[3];
//  xx[99] = xx[12];
//  xx[111] = xx[37];
//  xx[112] = xx[33];
//  xx[113] = xx[25];
//  pm_math_Quaternion_inverseXform_ra(xx + 5, xx + 92, xx + 25);
//  xx[4] = xx[95] - (pm_math_Vector3_dot_ra(xx + 9, xx + 97) +
//                    pm_math_Vector3_dot_ra(xx + 111, xx + 25));
//  xx[5] = - xx[141];
//  xx[6] = - xx[53];
//  xx[7] = - xx[49];
//  xx[8] = xx[138] - xx[20];
//  xx[9] = xx[3] + xx[54];
//  xx[3] = xx[12] + xx[4];
//  xx[10] = xx[14] * xx[3];
//  xx[11] = xx[14] * xx[9];
//  xx[12] = xx[9] + xx[2] * (xx[10] * xx[13] - xx[11] * xx[14]);
//  xx[18] = xx[3] - xx[2] * (xx[11] * xx[13] + xx[10] * xx[14]);
//  xx[37] = xx[8];
//  xx[38] = xx[12];
//  xx[39] = xx[18];
//  xx[53] = - xx[15];
//  xx[54] = - xx[128];
//  xx[55] = - xx[143];
//  xx[10] = xx[26] + xx[1] * xx[3];
//  xx[3] = xx[27] - xx[1] * xx[9];
//  xx[9] = xx[14] * xx[3];
//  xx[11] = xx[14] * xx[10];
//  xx[15] = xx[10] + xx[2] * (xx[9] * xx[13] - xx[11] * xx[14]);
//  xx[10] = xx[3] - xx[2] * (xx[11] * xx[13] + xx[9] * xx[14]);
//  xx[92] = xx[25];
//  xx[93] = xx[15];
//  xx[94] = xx[10];
//  xx[3] = xx[100] - (pm_math_Vector3_dot_ra(xx + 5, xx + 37) +
//                     pm_math_Vector3_dot_ra(xx + 53, xx + 92));
//  xx[5] = xx[118];
//  xx[6] = xx[121];
//  xx[7] = xx[62];
//  xx[9] = xx[8] - xx[3];
//  xx[8] = xx[12] - xx[139];
//  xx[11] = xx[8] * xx[23];
//  xx[12] = xx[9] * xx[23];
//  xx[13] = xx[9] + xx[2] * (xx[11] * xx[28] - xx[12] * xx[23]);
//  xx[14] = xx[8] - xx[2] * (xx[12] * xx[28] + xx[11] * xx[23]);
//  xx[11] = xx[18] + xx[102];
//  xx[37] = xx[13];
//  xx[38] = xx[14];
//  xx[39] = xx[11];
//  xx[53] = xx[124];
//  xx[54] = xx[126];
//  xx[55] = xx[129];
//  xx[12] = xx[25] - xx[172] - xx[71] * xx[11];
//  xx[18] = xx[15] - xx[170] * xx[3] + xx[173] + xx[11] * xx[76];
//  xx[15] = xx[18] * xx[23];
//  xx[20] = xx[12] * xx[23];
//  xx[21] = xx[12] + xx[2] * (xx[15] * xx[28] - xx[20] * xx[23]);
//  xx[12] = xx[18] - xx[2] * (xx[20] * xx[28] + xx[15] * xx[23]);
//  xx[2] = xx[10] + xx[17] - (xx[8] * xx[76] - xx[71] * xx[9]);
//  xx[8] = xx[21];
//  xx[9] = xx[12];
//  xx[10] = xx[2];
//  xx[15] = xx[103] - (pm_math_Vector3_dot_ra(xx + 5, xx + 37) +
//                      pm_math_Vector3_dot_ra(xx + 53, xx + 8));
//  xx[5] = xx[30];
//  xx[6] = xx[90];
//  xx[7] = xx[96];
//  xx[8] = xx[13] + xx[84];
//  xx[9] = xx[14] - xx[44];
//  xx[10] = xx[11] + xx[15];
//  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 8, xx + 25);
//  xx[28] = xx[31];
//  xx[29] = xx[34];
//  xx[30] = xx[35];
//  pm_math_Vector3_cross_ra(xx + 8, xx + 87, xx + 33);
//  xx[8] = xx[21] + xx[70] + xx[33];
//  xx[9] = xx[12] + xx[1] * xx[15] + xx[22] + xx[34];
//  xx[10] = xx[2] + xx[19] + xx[35];
//  pm_math_Quaternion_inverseXform_ra(xx + 40, xx + 8, xx + 11);
//  xx[2] = xx[104] - (pm_math_Vector3_dot_ra(xx + 5, xx + 25) +
//                     pm_math_Vector3_dot_ra(xx + 28, xx + 11));
//  xx[5] = xx[45];
//  xx[6] = xx[65];
//  xx[7] = xx[77];
//  xx[8] = xx[25] + xx[63];
//  xx[9] = xx[26] - xx[52];
//  xx[10] = xx[27] + xx[2];
//  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 8, xx + 17);
//  xx[20] = xx[47];
//  xx[21] = xx[50];
//  xx[22] = xx[51];
//  pm_math_Vector3_cross_ra(xx + 8, xx + 108, xx + 25);
//  xx[8] = xx[11] + xx[85] + xx[25];
//  xx[9] = xx[12] + xx[1] * xx[2] + xx[32] + xx[26];
//  xx[10] = xx[13] + xx[24] + xx[27];
//  pm_math_Quaternion_inverseXform_ra(xx + 56, xx + 8, xx + 11);
//  xx[8] = xx[105] - (pm_math_Vector3_dot_ra(xx + 5, xx + 17) +
//                     pm_math_Vector3_dot_ra(xx + 20, xx + 11));
//  xx[5] = xx[17] + xx[0];
//  xx[6] = xx[18] - xx[67];
//  xx[7] = xx[19] + xx[8];
//  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 5, xx + 17);
//  pm_math_Vector3_cross_ra(xx + 5, xx + 80, xx + 20);
//  xx[5] = xx[11] + xx[106] + xx[20];
//  xx[6] = xx[12] + xx[1] * xx[8] + xx[48] + xx[21];
//  xx[7] = xx[13] + xx[36] + xx[22];
//  pm_math_Quaternion_inverseXform_ra(xx + 72, xx + 5, xx + 9);
//  deriv[0] = state[1];
//  deriv[1] = xx[16];
//  deriv[2] = state[3];
//  deriv[3] = xx[4];
//  deriv[4] = state[5];
//  deriv[5] = xx[3];
//  deriv[6] = state[7];
//  deriv[7] = xx[15];
//  deriv[8] = state[9];
//  deriv[9] = xx[2];
//  deriv[10] = state[11];
//  deriv[11] = xx[8];
//  deriv[12] = state[13];
//  deriv[13] = xx[68] - (xx[91] * xx[19] + xx[61] * xx[10]);
//
//  for (int i=0; i<7; ++i)
//  {
//    deriv[2*i] = normalize_angle_positive(deriv[2*i]);
//  }

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
}

